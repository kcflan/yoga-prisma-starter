# source: http://localhost:4466
# timestamp: Thu Mar 19 2020 09:16:27 GMT-0700 (Mountain Standard Time)

type Access {
  id: Int!
  abbr: String
  name: String
  testAccess: Boolean
}

"""A connection to a list of items."""
type AccessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccessEdge]!
  aggregate: AggregateAccess!
}

input AccessCreateInput {
  abbr: String
  name: String
  testAccess: Boolean
}

"""An edge in a connection."""
type AccessEdge {
  """The item at the end of the edge."""
  node: Access!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccessOrderByInput {
  id_ASC
  id_DESC
  abbr_ASC
  abbr_DESC
  name_ASC
  name_DESC
  testAccess_ASC
  testAccess_DESC
}

type AccessPreviousValues {
  id: Int!
  abbr: String
  name: String
  testAccess: Boolean
}

type AccessSubscriptionPayload {
  mutation: MutationType!
  node: Access
  updatedFields: [String!]
  previousValues: AccessPreviousValues
}

input AccessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccessSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccessWhereInput
}

input AccessUpdateInput {
  abbr: String
  name: String
  testAccess: Boolean
}

input AccessUpdateManyMutationInput {
  abbr: String
  name: String
  testAccess: Boolean
}

input AccessWhereInput {
  """Logical AND on all given filters."""
  AND: [AccessWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccessWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  abbr: String

  """All values that are not equal to given value."""
  abbr_not: String

  """All values that are contained in given list."""
  abbr_in: [String!]

  """All values that are not contained in given list."""
  abbr_not_in: [String!]

  """All values less than the given value."""
  abbr_lt: String

  """All values less than or equal the given value."""
  abbr_lte: String

  """All values greater than the given value."""
  abbr_gt: String

  """All values greater than or equal the given value."""
  abbr_gte: String

  """All values containing the given string."""
  abbr_contains: String

  """All values not containing the given string."""
  abbr_not_contains: String

  """All values starting with the given string."""
  abbr_starts_with: String

  """All values not starting with the given string."""
  abbr_not_starts_with: String

  """All values ending with the given string."""
  abbr_ends_with: String

  """All values not ending with the given string."""
  abbr_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  testAccess: Boolean

  """All values that are not equal to given value."""
  testAccess_not: Boolean
}

input AccessWhereUniqueInput {
  id: Int
}

type Account {
  id: Int!
  accountOwner: User
  acctNum: String
  contactPrimary: Contact
  contactSecondary: Int
  fromLead: Lead
  leadCreator: User
  location: Location
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
  accountOwner: UserCreateOneInput
  contactPrimary: ContactCreateOneInput
  fromLead: LeadCreateOneWithoutAccountsInput
  leadCreator: UserCreateOneInput
  location: LocationCreateOneWithoutAccountsInput
}

input AccountCreateManyWithoutFromLeadInput {
  create: [AccountCreateWithoutFromLeadInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateManyWithoutLocationInput {
  create: [AccountCreateWithoutLocationInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateWithoutFromLeadInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
  accountOwner: UserCreateOneInput
  contactPrimary: ContactCreateOneInput
  leadCreator: UserCreateOneInput
  location: LocationCreateOneWithoutAccountsInput
}

input AccountCreateWithoutLocationInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
  accountOwner: UserCreateOneInput
  contactPrimary: ContactCreateOneInput
  fromLead: LeadCreateOneWithoutAccountsInput
  leadCreator: UserCreateOneInput
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  acctNum_ASC
  acctNum_DESC
  contactSecondary_ASC
  contactSecondary_DESC
  organizationName_ASC
  organizationName_DESC
  status_ASC
  status_DESC
  testAcct_ASC
  testAcct_DESC
  type_ASC
  type_DESC
}

type AccountPreviousValues {
  id: Int!
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
}

input AccountScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  acctNum: String

  """All values that are not equal to given value."""
  acctNum_not: String

  """All values that are contained in given list."""
  acctNum_in: [String!]

  """All values that are not contained in given list."""
  acctNum_not_in: [String!]

  """All values less than the given value."""
  acctNum_lt: String

  """All values less than or equal the given value."""
  acctNum_lte: String

  """All values greater than the given value."""
  acctNum_gt: String

  """All values greater than or equal the given value."""
  acctNum_gte: String

  """All values containing the given string."""
  acctNum_contains: String

  """All values not containing the given string."""
  acctNum_not_contains: String

  """All values starting with the given string."""
  acctNum_starts_with: String

  """All values not starting with the given string."""
  acctNum_not_starts_with: String

  """All values ending with the given string."""
  acctNum_ends_with: String

  """All values not ending with the given string."""
  acctNum_not_ends_with: String
  contactSecondary: Int

  """All values that are not equal to given value."""
  contactSecondary_not: Int

  """All values that are contained in given list."""
  contactSecondary_in: [Int!]

  """All values that are not contained in given list."""
  contactSecondary_not_in: [Int!]

  """All values less than the given value."""
  contactSecondary_lt: Int

  """All values less than or equal the given value."""
  contactSecondary_lte: Int

  """All values greater than the given value."""
  contactSecondary_gt: Int

  """All values greater than or equal the given value."""
  contactSecondary_gte: Int
  organizationName: String

  """All values that are not equal to given value."""
  organizationName_not: String

  """All values that are contained in given list."""
  organizationName_in: [String!]

  """All values that are not contained in given list."""
  organizationName_not_in: [String!]

  """All values less than the given value."""
  organizationName_lt: String

  """All values less than or equal the given value."""
  organizationName_lte: String

  """All values greater than the given value."""
  organizationName_gt: String

  """All values greater than or equal the given value."""
  organizationName_gte: String

  """All values containing the given string."""
  organizationName_contains: String

  """All values not containing the given string."""
  organizationName_not_contains: String

  """All values starting with the given string."""
  organizationName_starts_with: String

  """All values not starting with the given string."""
  organizationName_not_starts_with: String

  """All values ending with the given string."""
  organizationName_ends_with: String

  """All values not ending with the given string."""
  organizationName_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  testAcct: Boolean

  """All values that are not equal to given value."""
  testAcct_not: Boolean
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
}

input AccountUpdateInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
  accountOwner: UserUpdateOneInput
  contactPrimary: ContactUpdateOneInput
  fromLead: LeadUpdateOneWithoutAccountsInput
  leadCreator: UserUpdateOneInput
  location: LocationUpdateOneWithoutAccountsInput
}

input AccountUpdateManyDataInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
}

input AccountUpdateManyMutationInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
}

input AccountUpdateManyWithoutFromLeadInput {
  create: [AccountCreateWithoutFromLeadInput!]
  connect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutFromLeadInput!]
  updateMany: [AccountUpdateManyWithWhereNestedInput!]
  deleteMany: [AccountScalarWhereInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutFromLeadInput!]
}

input AccountUpdateManyWithoutLocationInput {
  create: [AccountCreateWithoutLocationInput!]
  connect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [AccountUpdateManyWithWhereNestedInput!]
  deleteMany: [AccountScalarWhereInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutLocationInput!]
}

input AccountUpdateManyWithWhereNestedInput {
  where: AccountScalarWhereInput!
  data: AccountUpdateManyDataInput!
}

input AccountUpdateWithoutFromLeadDataInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
  accountOwner: UserUpdateOneInput
  contactPrimary: ContactUpdateOneInput
  leadCreator: UserUpdateOneInput
  location: LocationUpdateOneWithoutAccountsInput
}

input AccountUpdateWithoutLocationDataInput {
  acctNum: String
  contactSecondary: Int
  organizationName: String
  status: String
  testAcct: Boolean
  type: String
  accountOwner: UserUpdateOneInput
  contactPrimary: ContactUpdateOneInput
  fromLead: LeadUpdateOneWithoutAccountsInput
  leadCreator: UserUpdateOneInput
}

input AccountUpdateWithWhereUniqueWithoutFromLeadInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutFromLeadDataInput!
}

input AccountUpdateWithWhereUniqueWithoutLocationInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutLocationDataInput!
}

input AccountUpsertWithWhereUniqueWithoutFromLeadInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutFromLeadDataInput!
  create: AccountCreateWithoutFromLeadInput!
}

input AccountUpsertWithWhereUniqueWithoutLocationInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutLocationDataInput!
  create: AccountCreateWithoutLocationInput!
}

input AccountWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  acctNum: String

  """All values that are not equal to given value."""
  acctNum_not: String

  """All values that are contained in given list."""
  acctNum_in: [String!]

  """All values that are not contained in given list."""
  acctNum_not_in: [String!]

  """All values less than the given value."""
  acctNum_lt: String

  """All values less than or equal the given value."""
  acctNum_lte: String

  """All values greater than the given value."""
  acctNum_gt: String

  """All values greater than or equal the given value."""
  acctNum_gte: String

  """All values containing the given string."""
  acctNum_contains: String

  """All values not containing the given string."""
  acctNum_not_contains: String

  """All values starting with the given string."""
  acctNum_starts_with: String

  """All values not starting with the given string."""
  acctNum_not_starts_with: String

  """All values ending with the given string."""
  acctNum_ends_with: String

  """All values not ending with the given string."""
  acctNum_not_ends_with: String
  contactSecondary: Int

  """All values that are not equal to given value."""
  contactSecondary_not: Int

  """All values that are contained in given list."""
  contactSecondary_in: [Int!]

  """All values that are not contained in given list."""
  contactSecondary_not_in: [Int!]

  """All values less than the given value."""
  contactSecondary_lt: Int

  """All values less than or equal the given value."""
  contactSecondary_lte: Int

  """All values greater than the given value."""
  contactSecondary_gt: Int

  """All values greater than or equal the given value."""
  contactSecondary_gte: Int
  organizationName: String

  """All values that are not equal to given value."""
  organizationName_not: String

  """All values that are contained in given list."""
  organizationName_in: [String!]

  """All values that are not contained in given list."""
  organizationName_not_in: [String!]

  """All values less than the given value."""
  organizationName_lt: String

  """All values less than or equal the given value."""
  organizationName_lte: String

  """All values greater than the given value."""
  organizationName_gt: String

  """All values greater than or equal the given value."""
  organizationName_gte: String

  """All values containing the given string."""
  organizationName_contains: String

  """All values not containing the given string."""
  organizationName_not_contains: String

  """All values starting with the given string."""
  organizationName_starts_with: String

  """All values not starting with the given string."""
  organizationName_not_starts_with: String

  """All values ending with the given string."""
  organizationName_ends_with: String

  """All values not ending with the given string."""
  organizationName_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  testAcct: Boolean

  """All values that are not equal to given value."""
  testAcct_not: Boolean
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  accountOwner: UserWhereInput
  contactPrimary: ContactWhereInput
  fromLead: LeadWhereInput
  leadCreator: UserWhereInput
  location: LocationWhereInput
}

input AccountWhereUniqueInput {
  id: Int
}

type AggregateAccess {
  count: Int!
}

type AggregateAccount {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateContact {
  count: Int!
}

type AggregateLead {
  count: Int!
}

type AggregateLeadsCampaign {
  count: Int!
}

type AggregateLeadsSource {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateOffice {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateSalesTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Company {
  id: Int!
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
  users: UserCreateManyWithoutCompanyInput
}

input CompanyCreateOneWithoutUsersInput {
  create: CompanyCreateWithoutUsersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutUsersInput {
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  companyChild_ASC
  companyChild_DESC
  companyParent_ASC
  companyParent_DESC
  name_ASC
  name_DESC
  testCompany_ASC
  testCompany_DESC
}

type CompanyPreviousValues {
  id: Int!
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
  users: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
}

input CompanyUpdateOneWithoutUsersInput {
  create: CompanyCreateWithoutUsersInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutUsersDataInput
  upsert: CompanyUpsertWithoutUsersInput
}

input CompanyUpdateWithoutUsersDataInput {
  active: Boolean
  companyChild: String
  companyParent: String
  name: String
  testCompany: Boolean
}

input CompanyUpsertWithoutUsersInput {
  update: CompanyUpdateWithoutUsersDataInput!
  create: CompanyCreateWithoutUsersInput!
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  companyChild: String

  """All values that are not equal to given value."""
  companyChild_not: String

  """All values that are contained in given list."""
  companyChild_in: [String!]

  """All values that are not contained in given list."""
  companyChild_not_in: [String!]

  """All values less than the given value."""
  companyChild_lt: String

  """All values less than or equal the given value."""
  companyChild_lte: String

  """All values greater than the given value."""
  companyChild_gt: String

  """All values greater than or equal the given value."""
  companyChild_gte: String

  """All values containing the given string."""
  companyChild_contains: String

  """All values not containing the given string."""
  companyChild_not_contains: String

  """All values starting with the given string."""
  companyChild_starts_with: String

  """All values not starting with the given string."""
  companyChild_not_starts_with: String

  """All values ending with the given string."""
  companyChild_ends_with: String

  """All values not ending with the given string."""
  companyChild_not_ends_with: String
  companyParent: String

  """All values that are not equal to given value."""
  companyParent_not: String

  """All values that are contained in given list."""
  companyParent_in: [String!]

  """All values that are not contained in given list."""
  companyParent_not_in: [String!]

  """All values less than the given value."""
  companyParent_lt: String

  """All values less than or equal the given value."""
  companyParent_lte: String

  """All values greater than the given value."""
  companyParent_gt: String

  """All values greater than or equal the given value."""
  companyParent_gte: String

  """All values containing the given string."""
  companyParent_contains: String

  """All values not containing the given string."""
  companyParent_not_contains: String

  """All values starting with the given string."""
  companyParent_starts_with: String

  """All values not starting with the given string."""
  companyParent_not_starts_with: String

  """All values ending with the given string."""
  companyParent_ends_with: String

  """All values not ending with the given string."""
  companyParent_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  testCompany: Boolean

  """All values that are not equal to given value."""
  testCompany_not: Boolean
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input CompanyWhereUniqueInput {
  id: Int
}

type Contact {
  id: Int!
  emailOne: String
  emailTwo: String
  firstName: String
  lastName: String
  otherLocationsIds: String
  phoneCell: String
  phoneHome: String
  primaryLocationId: Int
  suffix: String
  testContact: Boolean
}

"""A connection to a list of items."""
type ContactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  emailOne: String
  emailTwo: String
  firstName: String
  lastName: String
  otherLocationsIds: String
  phoneCell: String
  phoneHome: String
  primaryLocationId: Int
  suffix: String
  testContact: Boolean
}

input ContactCreateOneInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
}

"""An edge in a connection."""
type ContactEdge {
  """The item at the end of the edge."""
  node: Contact!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  emailOne_ASC
  emailOne_DESC
  emailTwo_ASC
  emailTwo_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  otherLocationsIds_ASC
  otherLocationsIds_DESC
  phoneCell_ASC
  phoneCell_DESC
  phoneHome_ASC
  phoneHome_DESC
  primaryLocationId_ASC
  primaryLocationId_DESC
  suffix_ASC
  suffix_DESC
  testContact_ASC
  testContact_DESC
}

type ContactPreviousValues {
  id: Int!
  emailOne: String
  emailTwo: String
  firstName: String
  lastName: String
  otherLocationsIds: String
  phoneCell: String
  phoneHome: String
  primaryLocationId: Int
  suffix: String
  testContact: Boolean
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
}

input ContactUpdateDataInput {
  emailOne: String
  emailTwo: String
  firstName: String
  lastName: String
  otherLocationsIds: String
  phoneCell: String
  phoneHome: String
  primaryLocationId: Int
  suffix: String
  testContact: Boolean
}

input ContactUpdateInput {
  emailOne: String
  emailTwo: String
  firstName: String
  lastName: String
  otherLocationsIds: String
  phoneCell: String
  phoneHome: String
  primaryLocationId: Int
  suffix: String
  testContact: Boolean
}

input ContactUpdateManyMutationInput {
  emailOne: String
  emailTwo: String
  firstName: String
  lastName: String
  otherLocationsIds: String
  phoneCell: String
  phoneHome: String
  primaryLocationId: Int
  suffix: String
  testContact: Boolean
}

input ContactUpdateOneInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ContactUpdateDataInput
  upsert: ContactUpsertNestedInput
}

input ContactUpsertNestedInput {
  update: ContactUpdateDataInput!
  create: ContactCreateInput!
}

input ContactWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  emailOne: String

  """All values that are not equal to given value."""
  emailOne_not: String

  """All values that are contained in given list."""
  emailOne_in: [String!]

  """All values that are not contained in given list."""
  emailOne_not_in: [String!]

  """All values less than the given value."""
  emailOne_lt: String

  """All values less than or equal the given value."""
  emailOne_lte: String

  """All values greater than the given value."""
  emailOne_gt: String

  """All values greater than or equal the given value."""
  emailOne_gte: String

  """All values containing the given string."""
  emailOne_contains: String

  """All values not containing the given string."""
  emailOne_not_contains: String

  """All values starting with the given string."""
  emailOne_starts_with: String

  """All values not starting with the given string."""
  emailOne_not_starts_with: String

  """All values ending with the given string."""
  emailOne_ends_with: String

  """All values not ending with the given string."""
  emailOne_not_ends_with: String
  emailTwo: String

  """All values that are not equal to given value."""
  emailTwo_not: String

  """All values that are contained in given list."""
  emailTwo_in: [String!]

  """All values that are not contained in given list."""
  emailTwo_not_in: [String!]

  """All values less than the given value."""
  emailTwo_lt: String

  """All values less than or equal the given value."""
  emailTwo_lte: String

  """All values greater than the given value."""
  emailTwo_gt: String

  """All values greater than or equal the given value."""
  emailTwo_gte: String

  """All values containing the given string."""
  emailTwo_contains: String

  """All values not containing the given string."""
  emailTwo_not_contains: String

  """All values starting with the given string."""
  emailTwo_starts_with: String

  """All values not starting with the given string."""
  emailTwo_not_starts_with: String

  """All values ending with the given string."""
  emailTwo_ends_with: String

  """All values not ending with the given string."""
  emailTwo_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  otherLocationsIds: String

  """All values that are not equal to given value."""
  otherLocationsIds_not: String

  """All values that are contained in given list."""
  otherLocationsIds_in: [String!]

  """All values that are not contained in given list."""
  otherLocationsIds_not_in: [String!]

  """All values less than the given value."""
  otherLocationsIds_lt: String

  """All values less than or equal the given value."""
  otherLocationsIds_lte: String

  """All values greater than the given value."""
  otherLocationsIds_gt: String

  """All values greater than or equal the given value."""
  otherLocationsIds_gte: String

  """All values containing the given string."""
  otherLocationsIds_contains: String

  """All values not containing the given string."""
  otherLocationsIds_not_contains: String

  """All values starting with the given string."""
  otherLocationsIds_starts_with: String

  """All values not starting with the given string."""
  otherLocationsIds_not_starts_with: String

  """All values ending with the given string."""
  otherLocationsIds_ends_with: String

  """All values not ending with the given string."""
  otherLocationsIds_not_ends_with: String
  phoneCell: String

  """All values that are not equal to given value."""
  phoneCell_not: String

  """All values that are contained in given list."""
  phoneCell_in: [String!]

  """All values that are not contained in given list."""
  phoneCell_not_in: [String!]

  """All values less than the given value."""
  phoneCell_lt: String

  """All values less than or equal the given value."""
  phoneCell_lte: String

  """All values greater than the given value."""
  phoneCell_gt: String

  """All values greater than or equal the given value."""
  phoneCell_gte: String

  """All values containing the given string."""
  phoneCell_contains: String

  """All values not containing the given string."""
  phoneCell_not_contains: String

  """All values starting with the given string."""
  phoneCell_starts_with: String

  """All values not starting with the given string."""
  phoneCell_not_starts_with: String

  """All values ending with the given string."""
  phoneCell_ends_with: String

  """All values not ending with the given string."""
  phoneCell_not_ends_with: String
  phoneHome: String

  """All values that are not equal to given value."""
  phoneHome_not: String

  """All values that are contained in given list."""
  phoneHome_in: [String!]

  """All values that are not contained in given list."""
  phoneHome_not_in: [String!]

  """All values less than the given value."""
  phoneHome_lt: String

  """All values less than or equal the given value."""
  phoneHome_lte: String

  """All values greater than the given value."""
  phoneHome_gt: String

  """All values greater than or equal the given value."""
  phoneHome_gte: String

  """All values containing the given string."""
  phoneHome_contains: String

  """All values not containing the given string."""
  phoneHome_not_contains: String

  """All values starting with the given string."""
  phoneHome_starts_with: String

  """All values not starting with the given string."""
  phoneHome_not_starts_with: String

  """All values ending with the given string."""
  phoneHome_ends_with: String

  """All values not ending with the given string."""
  phoneHome_not_ends_with: String
  primaryLocationId: Int

  """All values that are not equal to given value."""
  primaryLocationId_not: Int

  """All values that are contained in given list."""
  primaryLocationId_in: [Int!]

  """All values that are not contained in given list."""
  primaryLocationId_not_in: [Int!]

  """All values less than the given value."""
  primaryLocationId_lt: Int

  """All values less than or equal the given value."""
  primaryLocationId_lte: Int

  """All values greater than the given value."""
  primaryLocationId_gt: Int

  """All values greater than or equal the given value."""
  primaryLocationId_gte: Int
  suffix: String

  """All values that are not equal to given value."""
  suffix_not: String

  """All values that are contained in given list."""
  suffix_in: [String!]

  """All values that are not contained in given list."""
  suffix_not_in: [String!]

  """All values less than the given value."""
  suffix_lt: String

  """All values less than or equal the given value."""
  suffix_lte: String

  """All values greater than the given value."""
  suffix_gt: String

  """All values greater than or equal the given value."""
  suffix_gte: String

  """All values containing the given string."""
  suffix_contains: String

  """All values not containing the given string."""
  suffix_not_contains: String

  """All values starting with the given string."""
  suffix_starts_with: String

  """All values not starting with the given string."""
  suffix_not_starts_with: String

  """All values ending with the given string."""
  suffix_ends_with: String

  """All values not ending with the given string."""
  suffix_not_ends_with: String
  testContact: Boolean

  """All values that are not equal to given value."""
  testContact_not: Boolean
}

input ContactWhereUniqueInput {
  id: Int
}

type Lead {
  id: Int!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadCampaign: LeadsCampaign
  leadCreator: User
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
}

"""A connection to a list of items."""
type LeadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LeadEdge]!
  aggregate: AggregateLead!
}

input LeadCreateInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  accounts: AccountCreateManyWithoutFromLeadInput
  leadCampaign: LeadsCampaignCreateOneWithoutLeadsInput
  leadCreator: UserCreateOneWithoutLeadsInput
}

input LeadCreateManyWithoutLeadCampaignInput {
  create: [LeadCreateWithoutLeadCampaignInput!]
  connect: [LeadWhereUniqueInput!]
}

input LeadCreateManyWithoutLeadCreatorInput {
  create: [LeadCreateWithoutLeadCreatorInput!]
  connect: [LeadWhereUniqueInput!]
}

input LeadCreateOneWithoutAccountsInput {
  create: LeadCreateWithoutAccountsInput
  connect: LeadWhereUniqueInput
}

input LeadCreateWithoutAccountsInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  leadCampaign: LeadsCampaignCreateOneWithoutLeadsInput
  leadCreator: UserCreateOneWithoutLeadsInput
}

input LeadCreateWithoutLeadCampaignInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  accounts: AccountCreateManyWithoutFromLeadInput
  leadCreator: UserCreateOneWithoutLeadsInput
}

input LeadCreateWithoutLeadCreatorInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  accounts: AccountCreateManyWithoutFromLeadInput
  leadCampaign: LeadsCampaignCreateOneWithoutLeadsInput
}

"""An edge in a connection."""
type LeadEdge {
  """The item at the end of the edge."""
  node: Lead!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LeadOrderByInput {
  id_ASC
  id_DESC
  addressOne_ASC
  addressOne_DESC
  addressTwo_ASC
  addressTwo_DESC
  city_ASC
  city_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  gateCode_ASC
  gateCode_DESC
  lastName_ASC
  lastName_DESC
  leadSourceId_ASC
  leadSourceId_DESC
  phoneCell_ASC
  phoneCell_DESC
  phoneHome_ASC
  phoneHome_DESC
  stage_ASC
  stage_DESC
  stateAbbr_ASC
  stateAbbr_DESC
  testLead_ASC
  testLead_DESC
  zip_ASC
  zip_DESC
}

type LeadPreviousValues {
  id: Int!
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
}

input LeadScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  addressOne: String

  """All values that are not equal to given value."""
  addressOne_not: String

  """All values that are contained in given list."""
  addressOne_in: [String!]

  """All values that are not contained in given list."""
  addressOne_not_in: [String!]

  """All values less than the given value."""
  addressOne_lt: String

  """All values less than or equal the given value."""
  addressOne_lte: String

  """All values greater than the given value."""
  addressOne_gt: String

  """All values greater than or equal the given value."""
  addressOne_gte: String

  """All values containing the given string."""
  addressOne_contains: String

  """All values not containing the given string."""
  addressOne_not_contains: String

  """All values starting with the given string."""
  addressOne_starts_with: String

  """All values not starting with the given string."""
  addressOne_not_starts_with: String

  """All values ending with the given string."""
  addressOne_ends_with: String

  """All values not ending with the given string."""
  addressOne_not_ends_with: String
  addressTwo: String

  """All values that are not equal to given value."""
  addressTwo_not: String

  """All values that are contained in given list."""
  addressTwo_in: [String!]

  """All values that are not contained in given list."""
  addressTwo_not_in: [String!]

  """All values less than the given value."""
  addressTwo_lt: String

  """All values less than or equal the given value."""
  addressTwo_lte: String

  """All values greater than the given value."""
  addressTwo_gt: String

  """All values greater than or equal the given value."""
  addressTwo_gte: String

  """All values containing the given string."""
  addressTwo_contains: String

  """All values not containing the given string."""
  addressTwo_not_contains: String

  """All values starting with the given string."""
  addressTwo_starts_with: String

  """All values not starting with the given string."""
  addressTwo_not_starts_with: String

  """All values ending with the given string."""
  addressTwo_ends_with: String

  """All values not ending with the given string."""
  addressTwo_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  gateCode: String

  """All values that are not equal to given value."""
  gateCode_not: String

  """All values that are contained in given list."""
  gateCode_in: [String!]

  """All values that are not contained in given list."""
  gateCode_not_in: [String!]

  """All values less than the given value."""
  gateCode_lt: String

  """All values less than or equal the given value."""
  gateCode_lte: String

  """All values greater than the given value."""
  gateCode_gt: String

  """All values greater than or equal the given value."""
  gateCode_gte: String

  """All values containing the given string."""
  gateCode_contains: String

  """All values not containing the given string."""
  gateCode_not_contains: String

  """All values starting with the given string."""
  gateCode_starts_with: String

  """All values not starting with the given string."""
  gateCode_not_starts_with: String

  """All values ending with the given string."""
  gateCode_ends_with: String

  """All values not ending with the given string."""
  gateCode_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  leadSourceId: Int

  """All values that are not equal to given value."""
  leadSourceId_not: Int

  """All values that are contained in given list."""
  leadSourceId_in: [Int!]

  """All values that are not contained in given list."""
  leadSourceId_not_in: [Int!]

  """All values less than the given value."""
  leadSourceId_lt: Int

  """All values less than or equal the given value."""
  leadSourceId_lte: Int

  """All values greater than the given value."""
  leadSourceId_gt: Int

  """All values greater than or equal the given value."""
  leadSourceId_gte: Int
  phoneCell: String

  """All values that are not equal to given value."""
  phoneCell_not: String

  """All values that are contained in given list."""
  phoneCell_in: [String!]

  """All values that are not contained in given list."""
  phoneCell_not_in: [String!]

  """All values less than the given value."""
  phoneCell_lt: String

  """All values less than or equal the given value."""
  phoneCell_lte: String

  """All values greater than the given value."""
  phoneCell_gt: String

  """All values greater than or equal the given value."""
  phoneCell_gte: String

  """All values containing the given string."""
  phoneCell_contains: String

  """All values not containing the given string."""
  phoneCell_not_contains: String

  """All values starting with the given string."""
  phoneCell_starts_with: String

  """All values not starting with the given string."""
  phoneCell_not_starts_with: String

  """All values ending with the given string."""
  phoneCell_ends_with: String

  """All values not ending with the given string."""
  phoneCell_not_ends_with: String
  phoneHome: String

  """All values that are not equal to given value."""
  phoneHome_not: String

  """All values that are contained in given list."""
  phoneHome_in: [String!]

  """All values that are not contained in given list."""
  phoneHome_not_in: [String!]

  """All values less than the given value."""
  phoneHome_lt: String

  """All values less than or equal the given value."""
  phoneHome_lte: String

  """All values greater than the given value."""
  phoneHome_gt: String

  """All values greater than or equal the given value."""
  phoneHome_gte: String

  """All values containing the given string."""
  phoneHome_contains: String

  """All values not containing the given string."""
  phoneHome_not_contains: String

  """All values starting with the given string."""
  phoneHome_starts_with: String

  """All values not starting with the given string."""
  phoneHome_not_starts_with: String

  """All values ending with the given string."""
  phoneHome_ends_with: String

  """All values not ending with the given string."""
  phoneHome_not_ends_with: String
  stage: String

  """All values that are not equal to given value."""
  stage_not: String

  """All values that are contained in given list."""
  stage_in: [String!]

  """All values that are not contained in given list."""
  stage_not_in: [String!]

  """All values less than the given value."""
  stage_lt: String

  """All values less than or equal the given value."""
  stage_lte: String

  """All values greater than the given value."""
  stage_gt: String

  """All values greater than or equal the given value."""
  stage_gte: String

  """All values containing the given string."""
  stage_contains: String

  """All values not containing the given string."""
  stage_not_contains: String

  """All values starting with the given string."""
  stage_starts_with: String

  """All values not starting with the given string."""
  stage_not_starts_with: String

  """All values ending with the given string."""
  stage_ends_with: String

  """All values not ending with the given string."""
  stage_not_ends_with: String
  stateAbbr: String

  """All values that are not equal to given value."""
  stateAbbr_not: String

  """All values that are contained in given list."""
  stateAbbr_in: [String!]

  """All values that are not contained in given list."""
  stateAbbr_not_in: [String!]

  """All values less than the given value."""
  stateAbbr_lt: String

  """All values less than or equal the given value."""
  stateAbbr_lte: String

  """All values greater than the given value."""
  stateAbbr_gt: String

  """All values greater than or equal the given value."""
  stateAbbr_gte: String

  """All values containing the given string."""
  stateAbbr_contains: String

  """All values not containing the given string."""
  stateAbbr_not_contains: String

  """All values starting with the given string."""
  stateAbbr_starts_with: String

  """All values not starting with the given string."""
  stateAbbr_not_starts_with: String

  """All values ending with the given string."""
  stateAbbr_ends_with: String

  """All values not ending with the given string."""
  stateAbbr_not_ends_with: String
  testLead: Int

  """All values that are not equal to given value."""
  testLead_not: Int

  """All values that are contained in given list."""
  testLead_in: [Int!]

  """All values that are not contained in given list."""
  testLead_not_in: [Int!]

  """All values less than the given value."""
  testLead_lt: Int

  """All values less than or equal the given value."""
  testLead_lte: Int

  """All values greater than the given value."""
  testLead_gt: Int

  """All values greater than or equal the given value."""
  testLead_gte: Int
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
}

type LeadsCampaign {
  id: Int!
  active: Boolean
  companyId: Int
  leadDirection: Int
  leads(where: LeadWhereInput, orderBy: LeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lead!]
  leadSource: LeadsSource
  name: String
  testLeadCampaign: Boolean
}

"""A connection to a list of items."""
type LeadsCampaignConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LeadsCampaignEdge]!
  aggregate: AggregateLeadsCampaign!
}

input LeadsCampaignCreateInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
  leads: LeadCreateManyWithoutLeadCampaignInput
  leadSource: LeadsSourceCreateOneWithoutLeadsCampaignsInput
}

input LeadsCampaignCreateManyWithoutLeadSourceInput {
  create: [LeadsCampaignCreateWithoutLeadSourceInput!]
  connect: [LeadsCampaignWhereUniqueInput!]
}

input LeadsCampaignCreateOneWithoutLeadsInput {
  create: LeadsCampaignCreateWithoutLeadsInput
  connect: LeadsCampaignWhereUniqueInput
}

input LeadsCampaignCreateWithoutLeadsInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
  leadSource: LeadsSourceCreateOneWithoutLeadsCampaignsInput
}

input LeadsCampaignCreateWithoutLeadSourceInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
  leads: LeadCreateManyWithoutLeadCampaignInput
}

"""An edge in a connection."""
type LeadsCampaignEdge {
  """The item at the end of the edge."""
  node: LeadsCampaign!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LeadsCampaignOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  companyId_ASC
  companyId_DESC
  leadDirection_ASC
  leadDirection_DESC
  name_ASC
  name_DESC
  testLeadCampaign_ASC
  testLeadCampaign_DESC
}

type LeadsCampaignPreviousValues {
  id: Int!
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
}

input LeadsCampaignScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadsCampaignScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadsCampaignScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadsCampaignScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  companyId: Int

  """All values that are not equal to given value."""
  companyId_not: Int

  """All values that are contained in given list."""
  companyId_in: [Int!]

  """All values that are not contained in given list."""
  companyId_not_in: [Int!]

  """All values less than the given value."""
  companyId_lt: Int

  """All values less than or equal the given value."""
  companyId_lte: Int

  """All values greater than the given value."""
  companyId_gt: Int

  """All values greater than or equal the given value."""
  companyId_gte: Int
  leadDirection: Int

  """All values that are not equal to given value."""
  leadDirection_not: Int

  """All values that are contained in given list."""
  leadDirection_in: [Int!]

  """All values that are not contained in given list."""
  leadDirection_not_in: [Int!]

  """All values less than the given value."""
  leadDirection_lt: Int

  """All values less than or equal the given value."""
  leadDirection_lte: Int

  """All values greater than the given value."""
  leadDirection_gt: Int

  """All values greater than or equal the given value."""
  leadDirection_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  testLeadCampaign: Boolean

  """All values that are not equal to given value."""
  testLeadCampaign_not: Boolean
}

type LeadsCampaignSubscriptionPayload {
  mutation: MutationType!
  node: LeadsCampaign
  updatedFields: [String!]
  previousValues: LeadsCampaignPreviousValues
}

input LeadsCampaignSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadsCampaignSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadsCampaignSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadsCampaignSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeadsCampaignWhereInput
}

input LeadsCampaignUpdateInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
  leads: LeadUpdateManyWithoutLeadCampaignInput
  leadSource: LeadsSourceUpdateOneWithoutLeadsCampaignsInput
}

input LeadsCampaignUpdateManyDataInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
}

input LeadsCampaignUpdateManyMutationInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
}

input LeadsCampaignUpdateManyWithoutLeadSourceInput {
  create: [LeadsCampaignCreateWithoutLeadSourceInput!]
  connect: [LeadsCampaignWhereUniqueInput!]
  set: [LeadsCampaignWhereUniqueInput!]
  disconnect: [LeadsCampaignWhereUniqueInput!]
  delete: [LeadsCampaignWhereUniqueInput!]
  update: [LeadsCampaignUpdateWithWhereUniqueWithoutLeadSourceInput!]
  updateMany: [LeadsCampaignUpdateManyWithWhereNestedInput!]
  deleteMany: [LeadsCampaignScalarWhereInput!]
  upsert: [LeadsCampaignUpsertWithWhereUniqueWithoutLeadSourceInput!]
}

input LeadsCampaignUpdateManyWithWhereNestedInput {
  where: LeadsCampaignScalarWhereInput!
  data: LeadsCampaignUpdateManyDataInput!
}

input LeadsCampaignUpdateOneWithoutLeadsInput {
  create: LeadsCampaignCreateWithoutLeadsInput
  connect: LeadsCampaignWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LeadsCampaignUpdateWithoutLeadsDataInput
  upsert: LeadsCampaignUpsertWithoutLeadsInput
}

input LeadsCampaignUpdateWithoutLeadsDataInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
  leadSource: LeadsSourceUpdateOneWithoutLeadsCampaignsInput
}

input LeadsCampaignUpdateWithoutLeadSourceDataInput {
  active: Boolean
  companyId: Int
  leadDirection: Int
  name: String
  testLeadCampaign: Boolean
  leads: LeadUpdateManyWithoutLeadCampaignInput
}

input LeadsCampaignUpdateWithWhereUniqueWithoutLeadSourceInput {
  where: LeadsCampaignWhereUniqueInput!
  data: LeadsCampaignUpdateWithoutLeadSourceDataInput!
}

input LeadsCampaignUpsertWithoutLeadsInput {
  update: LeadsCampaignUpdateWithoutLeadsDataInput!
  create: LeadsCampaignCreateWithoutLeadsInput!
}

input LeadsCampaignUpsertWithWhereUniqueWithoutLeadSourceInput {
  where: LeadsCampaignWhereUniqueInput!
  update: LeadsCampaignUpdateWithoutLeadSourceDataInput!
  create: LeadsCampaignCreateWithoutLeadSourceInput!
}

input LeadsCampaignWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadsCampaignWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadsCampaignWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadsCampaignWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  companyId: Int

  """All values that are not equal to given value."""
  companyId_not: Int

  """All values that are contained in given list."""
  companyId_in: [Int!]

  """All values that are not contained in given list."""
  companyId_not_in: [Int!]

  """All values less than the given value."""
  companyId_lt: Int

  """All values less than or equal the given value."""
  companyId_lte: Int

  """All values greater than the given value."""
  companyId_gt: Int

  """All values greater than or equal the given value."""
  companyId_gte: Int
  leadDirection: Int

  """All values that are not equal to given value."""
  leadDirection_not: Int

  """All values that are contained in given list."""
  leadDirection_in: [Int!]

  """All values that are not contained in given list."""
  leadDirection_not_in: [Int!]

  """All values less than the given value."""
  leadDirection_lt: Int

  """All values less than or equal the given value."""
  leadDirection_lte: Int

  """All values greater than the given value."""
  leadDirection_gt: Int

  """All values greater than or equal the given value."""
  leadDirection_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  testLeadCampaign: Boolean

  """All values that are not equal to given value."""
  testLeadCampaign_not: Boolean
  leads_every: LeadWhereInput
  leads_some: LeadWhereInput
  leads_none: LeadWhereInput
  leadSource: LeadsSourceWhereInput
}

input LeadsCampaignWhereUniqueInput {
  id: Int
}

type LeadsSource {
  id: Int!
  active: Boolean
  leadsCampaigns(where: LeadsCampaignWhereInput, orderBy: LeadsCampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LeadsCampaign!]
  name: String
  testLeadSource: Boolean
  type: String
}

"""A connection to a list of items."""
type LeadsSourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LeadsSourceEdge]!
  aggregate: AggregateLeadsSource!
}

input LeadsSourceCreateInput {
  active: Boolean
  name: String
  testLeadSource: Boolean
  type: String
  leadsCampaigns: LeadsCampaignCreateManyWithoutLeadSourceInput
}

input LeadsSourceCreateOneWithoutLeadsCampaignsInput {
  create: LeadsSourceCreateWithoutLeadsCampaignsInput
  connect: LeadsSourceWhereUniqueInput
}

input LeadsSourceCreateWithoutLeadsCampaignsInput {
  active: Boolean
  name: String
  testLeadSource: Boolean
  type: String
}

"""An edge in a connection."""
type LeadsSourceEdge {
  """The item at the end of the edge."""
  node: LeadsSource!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LeadsSourceOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  name_ASC
  name_DESC
  testLeadSource_ASC
  testLeadSource_DESC
  type_ASC
  type_DESC
}

type LeadsSourcePreviousValues {
  id: Int!
  active: Boolean
  name: String
  testLeadSource: Boolean
  type: String
}

type LeadsSourceSubscriptionPayload {
  mutation: MutationType!
  node: LeadsSource
  updatedFields: [String!]
  previousValues: LeadsSourcePreviousValues
}

input LeadsSourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadsSourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadsSourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadsSourceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeadsSourceWhereInput
}

input LeadsSourceUpdateInput {
  active: Boolean
  name: String
  testLeadSource: Boolean
  type: String
  leadsCampaigns: LeadsCampaignUpdateManyWithoutLeadSourceInput
}

input LeadsSourceUpdateManyMutationInput {
  active: Boolean
  name: String
  testLeadSource: Boolean
  type: String
}

input LeadsSourceUpdateOneWithoutLeadsCampaignsInput {
  create: LeadsSourceCreateWithoutLeadsCampaignsInput
  connect: LeadsSourceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LeadsSourceUpdateWithoutLeadsCampaignsDataInput
  upsert: LeadsSourceUpsertWithoutLeadsCampaignsInput
}

input LeadsSourceUpdateWithoutLeadsCampaignsDataInput {
  active: Boolean
  name: String
  testLeadSource: Boolean
  type: String
}

input LeadsSourceUpsertWithoutLeadsCampaignsInput {
  update: LeadsSourceUpdateWithoutLeadsCampaignsDataInput!
  create: LeadsSourceCreateWithoutLeadsCampaignsInput!
}

input LeadsSourceWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadsSourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadsSourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadsSourceWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  testLeadSource: Boolean

  """All values that are not equal to given value."""
  testLeadSource_not: Boolean
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  leadsCampaigns_every: LeadsCampaignWhereInput
  leadsCampaigns_some: LeadsCampaignWhereInput
  leadsCampaigns_none: LeadsCampaignWhereInput
}

input LeadsSourceWhereUniqueInput {
  id: Int
}

type LeadSubscriptionPayload {
  mutation: MutationType!
  node: Lead
  updatedFields: [String!]
  previousValues: LeadPreviousValues
}

input LeadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeadWhereInput
}

input LeadUpdateInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  accounts: AccountUpdateManyWithoutFromLeadInput
  leadCampaign: LeadsCampaignUpdateOneWithoutLeadsInput
  leadCreator: UserUpdateOneWithoutLeadsInput
}

input LeadUpdateManyDataInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
}

input LeadUpdateManyMutationInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
}

input LeadUpdateManyWithoutLeadCampaignInput {
  create: [LeadCreateWithoutLeadCampaignInput!]
  connect: [LeadWhereUniqueInput!]
  set: [LeadWhereUniqueInput!]
  disconnect: [LeadWhereUniqueInput!]
  delete: [LeadWhereUniqueInput!]
  update: [LeadUpdateWithWhereUniqueWithoutLeadCampaignInput!]
  updateMany: [LeadUpdateManyWithWhereNestedInput!]
  deleteMany: [LeadScalarWhereInput!]
  upsert: [LeadUpsertWithWhereUniqueWithoutLeadCampaignInput!]
}

input LeadUpdateManyWithoutLeadCreatorInput {
  create: [LeadCreateWithoutLeadCreatorInput!]
  connect: [LeadWhereUniqueInput!]
  set: [LeadWhereUniqueInput!]
  disconnect: [LeadWhereUniqueInput!]
  delete: [LeadWhereUniqueInput!]
  update: [LeadUpdateWithWhereUniqueWithoutLeadCreatorInput!]
  updateMany: [LeadUpdateManyWithWhereNestedInput!]
  deleteMany: [LeadScalarWhereInput!]
  upsert: [LeadUpsertWithWhereUniqueWithoutLeadCreatorInput!]
}

input LeadUpdateManyWithWhereNestedInput {
  where: LeadScalarWhereInput!
  data: LeadUpdateManyDataInput!
}

input LeadUpdateOneWithoutAccountsInput {
  create: LeadCreateWithoutAccountsInput
  connect: LeadWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LeadUpdateWithoutAccountsDataInput
  upsert: LeadUpsertWithoutAccountsInput
}

input LeadUpdateWithoutAccountsDataInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  leadCampaign: LeadsCampaignUpdateOneWithoutLeadsInput
  leadCreator: UserUpdateOneWithoutLeadsInput
}

input LeadUpdateWithoutLeadCampaignDataInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  accounts: AccountUpdateManyWithoutFromLeadInput
  leadCreator: UserUpdateOneWithoutLeadsInput
}

input LeadUpdateWithoutLeadCreatorDataInput {
  addressOne: String
  addressTwo: String
  city: String
  email: String
  firstName: String
  gateCode: String
  lastName: String
  leadSourceId: Int
  phoneCell: String
  phoneHome: String
  stage: String
  stateAbbr: String
  testLead: Int
  zip: String
  accounts: AccountUpdateManyWithoutFromLeadInput
  leadCampaign: LeadsCampaignUpdateOneWithoutLeadsInput
}

input LeadUpdateWithWhereUniqueWithoutLeadCampaignInput {
  where: LeadWhereUniqueInput!
  data: LeadUpdateWithoutLeadCampaignDataInput!
}

input LeadUpdateWithWhereUniqueWithoutLeadCreatorInput {
  where: LeadWhereUniqueInput!
  data: LeadUpdateWithoutLeadCreatorDataInput!
}

input LeadUpsertWithoutAccountsInput {
  update: LeadUpdateWithoutAccountsDataInput!
  create: LeadCreateWithoutAccountsInput!
}

input LeadUpsertWithWhereUniqueWithoutLeadCampaignInput {
  where: LeadWhereUniqueInput!
  update: LeadUpdateWithoutLeadCampaignDataInput!
  create: LeadCreateWithoutLeadCampaignInput!
}

input LeadUpsertWithWhereUniqueWithoutLeadCreatorInput {
  where: LeadWhereUniqueInput!
  update: LeadUpdateWithoutLeadCreatorDataInput!
  create: LeadCreateWithoutLeadCreatorInput!
}

input LeadWhereInput {
  """Logical AND on all given filters."""
  AND: [LeadWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeadWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  addressOne: String

  """All values that are not equal to given value."""
  addressOne_not: String

  """All values that are contained in given list."""
  addressOne_in: [String!]

  """All values that are not contained in given list."""
  addressOne_not_in: [String!]

  """All values less than the given value."""
  addressOne_lt: String

  """All values less than or equal the given value."""
  addressOne_lte: String

  """All values greater than the given value."""
  addressOne_gt: String

  """All values greater than or equal the given value."""
  addressOne_gte: String

  """All values containing the given string."""
  addressOne_contains: String

  """All values not containing the given string."""
  addressOne_not_contains: String

  """All values starting with the given string."""
  addressOne_starts_with: String

  """All values not starting with the given string."""
  addressOne_not_starts_with: String

  """All values ending with the given string."""
  addressOne_ends_with: String

  """All values not ending with the given string."""
  addressOne_not_ends_with: String
  addressTwo: String

  """All values that are not equal to given value."""
  addressTwo_not: String

  """All values that are contained in given list."""
  addressTwo_in: [String!]

  """All values that are not contained in given list."""
  addressTwo_not_in: [String!]

  """All values less than the given value."""
  addressTwo_lt: String

  """All values less than or equal the given value."""
  addressTwo_lte: String

  """All values greater than the given value."""
  addressTwo_gt: String

  """All values greater than or equal the given value."""
  addressTwo_gte: String

  """All values containing the given string."""
  addressTwo_contains: String

  """All values not containing the given string."""
  addressTwo_not_contains: String

  """All values starting with the given string."""
  addressTwo_starts_with: String

  """All values not starting with the given string."""
  addressTwo_not_starts_with: String

  """All values ending with the given string."""
  addressTwo_ends_with: String

  """All values not ending with the given string."""
  addressTwo_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  gateCode: String

  """All values that are not equal to given value."""
  gateCode_not: String

  """All values that are contained in given list."""
  gateCode_in: [String!]

  """All values that are not contained in given list."""
  gateCode_not_in: [String!]

  """All values less than the given value."""
  gateCode_lt: String

  """All values less than or equal the given value."""
  gateCode_lte: String

  """All values greater than the given value."""
  gateCode_gt: String

  """All values greater than or equal the given value."""
  gateCode_gte: String

  """All values containing the given string."""
  gateCode_contains: String

  """All values not containing the given string."""
  gateCode_not_contains: String

  """All values starting with the given string."""
  gateCode_starts_with: String

  """All values not starting with the given string."""
  gateCode_not_starts_with: String

  """All values ending with the given string."""
  gateCode_ends_with: String

  """All values not ending with the given string."""
  gateCode_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  leadSourceId: Int

  """All values that are not equal to given value."""
  leadSourceId_not: Int

  """All values that are contained in given list."""
  leadSourceId_in: [Int!]

  """All values that are not contained in given list."""
  leadSourceId_not_in: [Int!]

  """All values less than the given value."""
  leadSourceId_lt: Int

  """All values less than or equal the given value."""
  leadSourceId_lte: Int

  """All values greater than the given value."""
  leadSourceId_gt: Int

  """All values greater than or equal the given value."""
  leadSourceId_gte: Int
  phoneCell: String

  """All values that are not equal to given value."""
  phoneCell_not: String

  """All values that are contained in given list."""
  phoneCell_in: [String!]

  """All values that are not contained in given list."""
  phoneCell_not_in: [String!]

  """All values less than the given value."""
  phoneCell_lt: String

  """All values less than or equal the given value."""
  phoneCell_lte: String

  """All values greater than the given value."""
  phoneCell_gt: String

  """All values greater than or equal the given value."""
  phoneCell_gte: String

  """All values containing the given string."""
  phoneCell_contains: String

  """All values not containing the given string."""
  phoneCell_not_contains: String

  """All values starting with the given string."""
  phoneCell_starts_with: String

  """All values not starting with the given string."""
  phoneCell_not_starts_with: String

  """All values ending with the given string."""
  phoneCell_ends_with: String

  """All values not ending with the given string."""
  phoneCell_not_ends_with: String
  phoneHome: String

  """All values that are not equal to given value."""
  phoneHome_not: String

  """All values that are contained in given list."""
  phoneHome_in: [String!]

  """All values that are not contained in given list."""
  phoneHome_not_in: [String!]

  """All values less than the given value."""
  phoneHome_lt: String

  """All values less than or equal the given value."""
  phoneHome_lte: String

  """All values greater than the given value."""
  phoneHome_gt: String

  """All values greater than or equal the given value."""
  phoneHome_gte: String

  """All values containing the given string."""
  phoneHome_contains: String

  """All values not containing the given string."""
  phoneHome_not_contains: String

  """All values starting with the given string."""
  phoneHome_starts_with: String

  """All values not starting with the given string."""
  phoneHome_not_starts_with: String

  """All values ending with the given string."""
  phoneHome_ends_with: String

  """All values not ending with the given string."""
  phoneHome_not_ends_with: String
  stage: String

  """All values that are not equal to given value."""
  stage_not: String

  """All values that are contained in given list."""
  stage_in: [String!]

  """All values that are not contained in given list."""
  stage_not_in: [String!]

  """All values less than the given value."""
  stage_lt: String

  """All values less than or equal the given value."""
  stage_lte: String

  """All values greater than the given value."""
  stage_gt: String

  """All values greater than or equal the given value."""
  stage_gte: String

  """All values containing the given string."""
  stage_contains: String

  """All values not containing the given string."""
  stage_not_contains: String

  """All values starting with the given string."""
  stage_starts_with: String

  """All values not starting with the given string."""
  stage_not_starts_with: String

  """All values ending with the given string."""
  stage_ends_with: String

  """All values not ending with the given string."""
  stage_not_ends_with: String
  stateAbbr: String

  """All values that are not equal to given value."""
  stateAbbr_not: String

  """All values that are contained in given list."""
  stateAbbr_in: [String!]

  """All values that are not contained in given list."""
  stateAbbr_not_in: [String!]

  """All values less than the given value."""
  stateAbbr_lt: String

  """All values less than or equal the given value."""
  stateAbbr_lte: String

  """All values greater than the given value."""
  stateAbbr_gt: String

  """All values greater than or equal the given value."""
  stateAbbr_gte: String

  """All values containing the given string."""
  stateAbbr_contains: String

  """All values not containing the given string."""
  stateAbbr_not_contains: String

  """All values starting with the given string."""
  stateAbbr_starts_with: String

  """All values not starting with the given string."""
  stateAbbr_not_starts_with: String

  """All values ending with the given string."""
  stateAbbr_ends_with: String

  """All values not ending with the given string."""
  stateAbbr_not_ends_with: String
  testLead: Int

  """All values that are not equal to given value."""
  testLead_not: Int

  """All values that are contained in given list."""
  testLead_in: [Int!]

  """All values that are not contained in given list."""
  testLead_not_in: [Int!]

  """All values less than the given value."""
  testLead_lt: Int

  """All values less than or equal the given value."""
  testLead_lte: Int

  """All values greater than the given value."""
  testLead_gt: Int

  """All values greater than or equal the given value."""
  testLead_gte: Int
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
  leadCampaign: LeadsCampaignWhereInput
  leadCreator: UserWhereInput
}

input LeadWhereUniqueInput {
  id: Int
}

type Location {
  id: Int!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
  accounts: AccountCreateManyWithoutLocationInput
}

input LocationCreateOneWithoutAccountsInput {
  create: LocationCreateWithoutAccountsInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutAccountsInput {
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  acctNumId_ASC
  acctNumId_DESC
  addressOne_ASC
  addressOne_DESC
  addressTwo_ASC
  addressTwo_DESC
  city_ASC
  city_DESC
  gateCode_ASC
  gateCode_DESC
  stateAbbr_ASC
  stateAbbr_DESC
  testLocation_ASC
  testLocation_DESC
  zip_ASC
  zip_DESC
}

type LocationPreviousValues {
  id: Int!
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateInput {
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
  accounts: AccountUpdateManyWithoutLocationInput
}

input LocationUpdateManyMutationInput {
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
}

input LocationUpdateOneWithoutAccountsInput {
  create: LocationCreateWithoutAccountsInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateWithoutAccountsDataInput
  upsert: LocationUpsertWithoutAccountsInput
}

input LocationUpdateWithoutAccountsDataInput {
  acctNumId: Int
  addressOne: String
  addressTwo: String
  city: String
  gateCode: String
  stateAbbr: String
  testLocation: Boolean
  zip: String
}

input LocationUpsertWithoutAccountsInput {
  update: LocationUpdateWithoutAccountsDataInput!
  create: LocationCreateWithoutAccountsInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  acctNumId: Int

  """All values that are not equal to given value."""
  acctNumId_not: Int

  """All values that are contained in given list."""
  acctNumId_in: [Int!]

  """All values that are not contained in given list."""
  acctNumId_not_in: [Int!]

  """All values less than the given value."""
  acctNumId_lt: Int

  """All values less than or equal the given value."""
  acctNumId_lte: Int

  """All values greater than the given value."""
  acctNumId_gt: Int

  """All values greater than or equal the given value."""
  acctNumId_gte: Int
  addressOne: String

  """All values that are not equal to given value."""
  addressOne_not: String

  """All values that are contained in given list."""
  addressOne_in: [String!]

  """All values that are not contained in given list."""
  addressOne_not_in: [String!]

  """All values less than the given value."""
  addressOne_lt: String

  """All values less than or equal the given value."""
  addressOne_lte: String

  """All values greater than the given value."""
  addressOne_gt: String

  """All values greater than or equal the given value."""
  addressOne_gte: String

  """All values containing the given string."""
  addressOne_contains: String

  """All values not containing the given string."""
  addressOne_not_contains: String

  """All values starting with the given string."""
  addressOne_starts_with: String

  """All values not starting with the given string."""
  addressOne_not_starts_with: String

  """All values ending with the given string."""
  addressOne_ends_with: String

  """All values not ending with the given string."""
  addressOne_not_ends_with: String
  addressTwo: String

  """All values that are not equal to given value."""
  addressTwo_not: String

  """All values that are contained in given list."""
  addressTwo_in: [String!]

  """All values that are not contained in given list."""
  addressTwo_not_in: [String!]

  """All values less than the given value."""
  addressTwo_lt: String

  """All values less than or equal the given value."""
  addressTwo_lte: String

  """All values greater than the given value."""
  addressTwo_gt: String

  """All values greater than or equal the given value."""
  addressTwo_gte: String

  """All values containing the given string."""
  addressTwo_contains: String

  """All values not containing the given string."""
  addressTwo_not_contains: String

  """All values starting with the given string."""
  addressTwo_starts_with: String

  """All values not starting with the given string."""
  addressTwo_not_starts_with: String

  """All values ending with the given string."""
  addressTwo_ends_with: String

  """All values not ending with the given string."""
  addressTwo_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  gateCode: String

  """All values that are not equal to given value."""
  gateCode_not: String

  """All values that are contained in given list."""
  gateCode_in: [String!]

  """All values that are not contained in given list."""
  gateCode_not_in: [String!]

  """All values less than the given value."""
  gateCode_lt: String

  """All values less than or equal the given value."""
  gateCode_lte: String

  """All values greater than the given value."""
  gateCode_gt: String

  """All values greater than or equal the given value."""
  gateCode_gte: String

  """All values containing the given string."""
  gateCode_contains: String

  """All values not containing the given string."""
  gateCode_not_contains: String

  """All values starting with the given string."""
  gateCode_starts_with: String

  """All values not starting with the given string."""
  gateCode_not_starts_with: String

  """All values ending with the given string."""
  gateCode_ends_with: String

  """All values not ending with the given string."""
  gateCode_not_ends_with: String
  stateAbbr: String

  """All values that are not equal to given value."""
  stateAbbr_not: String

  """All values that are contained in given list."""
  stateAbbr_in: [String!]

  """All values that are not contained in given list."""
  stateAbbr_not_in: [String!]

  """All values less than the given value."""
  stateAbbr_lt: String

  """All values less than or equal the given value."""
  stateAbbr_lte: String

  """All values greater than the given value."""
  stateAbbr_gt: String

  """All values greater than or equal the given value."""
  stateAbbr_gte: String

  """All values containing the given string."""
  stateAbbr_contains: String

  """All values not containing the given string."""
  stateAbbr_not_contains: String

  """All values starting with the given string."""
  stateAbbr_starts_with: String

  """All values not starting with the given string."""
  stateAbbr_not_starts_with: String

  """All values ending with the given string."""
  stateAbbr_ends_with: String

  """All values not ending with the given string."""
  stateAbbr_not_ends_with: String
  testLocation: Boolean

  """All values that are not equal to given value."""
  testLocation_not: Boolean
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
}

input LocationWhereUniqueInput {
  id: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAccess(data: AccessCreateInput!): Access!
  createAccount(data: AccountCreateInput!): Account!
  createCompany(data: CompanyCreateInput!): Company!
  createLead(data: LeadCreateInput!): Lead!
  createLeadsCampaign(data: LeadsCampaignCreateInput!): LeadsCampaign!
  createLeadsSource(data: LeadsSourceCreateInput!): LeadsSource!
  createLocation(data: LocationCreateInput!): Location!
  createOffice(data: OfficeCreateInput!): Office!
  createRole(data: RoleCreateInput!): Role!
  createSalesTeam(data: SalesTeamCreateInput!): SalesTeam!
  createUser(data: UserCreateInput!): User!
  createContact(data: ContactCreateInput!): Contact!
  updateAccess(data: AccessUpdateInput!, where: AccessWhereUniqueInput!): Access
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateLead(data: LeadUpdateInput!, where: LeadWhereUniqueInput!): Lead
  updateLeadsCampaign(data: LeadsCampaignUpdateInput!, where: LeadsCampaignWhereUniqueInput!): LeadsCampaign
  updateLeadsSource(data: LeadsSourceUpdateInput!, where: LeadsSourceWhereUniqueInput!): LeadsSource
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateOffice(data: OfficeUpdateInput!, where: OfficeWhereUniqueInput!): Office
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateSalesTeam(data: SalesTeamUpdateInput!, where: SalesTeamWhereUniqueInput!): SalesTeam
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  deleteAccess(where: AccessWhereUniqueInput!): Access
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteLead(where: LeadWhereUniqueInput!): Lead
  deleteLeadsCampaign(where: LeadsCampaignWhereUniqueInput!): LeadsCampaign
  deleteLeadsSource(where: LeadsSourceWhereUniqueInput!): LeadsSource
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteOffice(where: OfficeWhereUniqueInput!): Office
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteSalesTeam(where: SalesTeamWhereUniqueInput!): SalesTeam
  deleteUser(where: UserWhereUniqueInput!): User
  deleteContact(where: ContactWhereUniqueInput!): Contact
  upsertAccess(where: AccessWhereUniqueInput!, create: AccessCreateInput!, update: AccessUpdateInput!): Access!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertLead(where: LeadWhereUniqueInput!, create: LeadCreateInput!, update: LeadUpdateInput!): Lead!
  upsertLeadsCampaign(where: LeadsCampaignWhereUniqueInput!, create: LeadsCampaignCreateInput!, update: LeadsCampaignUpdateInput!): LeadsCampaign!
  upsertLeadsSource(where: LeadsSourceWhereUniqueInput!, create: LeadsSourceCreateInput!, update: LeadsSourceUpdateInput!): LeadsSource!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertOffice(where: OfficeWhereUniqueInput!, create: OfficeCreateInput!, update: OfficeUpdateInput!): Office!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertSalesTeam(where: SalesTeamWhereUniqueInput!, create: SalesTeamCreateInput!, update: SalesTeamUpdateInput!): SalesTeam!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  updateManyAccesses(data: AccessUpdateManyMutationInput!, where: AccessWhereInput): BatchPayload!
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyLeads(data: LeadUpdateManyMutationInput!, where: LeadWhereInput): BatchPayload!
  updateManyLeadsCampaigns(data: LeadsCampaignUpdateManyMutationInput!, where: LeadsCampaignWhereInput): BatchPayload!
  updateManyLeadsSources(data: LeadsSourceUpdateManyMutationInput!, where: LeadsSourceWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyOffices(data: OfficeUpdateManyMutationInput!, where: OfficeWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManySalesTeams(data: SalesTeamUpdateManyMutationInput!, where: SalesTeamWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  deleteManyAccesses(where: AccessWhereInput): BatchPayload!
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyLeads(where: LeadWhereInput): BatchPayload!
  deleteManyLeadsCampaigns(where: LeadsCampaignWhereInput): BatchPayload!
  deleteManyLeadsSources(where: LeadsSourceWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyOffices(where: OfficeWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManySalesTeams(where: SalesTeamWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Office {
  id: Int!
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  salesTeams(where: SalesTeamWhereInput, orderBy: SalesTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesTeam!]
  stateAbbr: String
  testOffice: Boolean
  zip: String
}

"""A connection to a list of items."""
type OfficeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OfficeEdge]!
  aggregate: AggregateOffice!
}

input OfficeCreateInput {
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  stateAbbr: String
  testOffice: Boolean
  zip: String
  salesTeams: SalesTeamCreateManyWithoutOfficeInput
}

input OfficeCreateOneWithoutSalesTeamsInput {
  create: OfficeCreateWithoutSalesTeamsInput
  connect: OfficeWhereUniqueInput
}

input OfficeCreateWithoutSalesTeamsInput {
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  stateAbbr: String
  testOffice: Boolean
  zip: String
}

"""An edge in a connection."""
type OfficeEdge {
  """The item at the end of the edge."""
  node: Office!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OfficeOrderByInput {
  id_ASC
  id_DESC
  addressOne_ASC
  addressOne_DESC
  addressTwo_ASC
  addressTwo_DESC
  city_ASC
  city_DESC
  hasWarehouse_ASC
  hasWarehouse_DESC
  name_ASC
  name_DESC
  stateAbbr_ASC
  stateAbbr_DESC
  testOffice_ASC
  testOffice_DESC
  zip_ASC
  zip_DESC
}

type OfficePreviousValues {
  id: Int!
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  stateAbbr: String
  testOffice: Boolean
  zip: String
}

type OfficeSubscriptionPayload {
  mutation: MutationType!
  node: Office
  updatedFields: [String!]
  previousValues: OfficePreviousValues
}

input OfficeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OfficeWhereInput
}

input OfficeUpdateInput {
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  stateAbbr: String
  testOffice: Boolean
  zip: String
  salesTeams: SalesTeamUpdateManyWithoutOfficeInput
}

input OfficeUpdateManyMutationInput {
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  stateAbbr: String
  testOffice: Boolean
  zip: String
}

input OfficeUpdateOneWithoutSalesTeamsInput {
  create: OfficeCreateWithoutSalesTeamsInput
  connect: OfficeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OfficeUpdateWithoutSalesTeamsDataInput
  upsert: OfficeUpsertWithoutSalesTeamsInput
}

input OfficeUpdateWithoutSalesTeamsDataInput {
  addressOne: String
  addressTwo: String
  city: String
  hasWarehouse: Boolean
  name: String
  stateAbbr: String
  testOffice: Boolean
  zip: String
}

input OfficeUpsertWithoutSalesTeamsInput {
  update: OfficeUpdateWithoutSalesTeamsDataInput!
  create: OfficeCreateWithoutSalesTeamsInput!
}

input OfficeWhereInput {
  """Logical AND on all given filters."""
  AND: [OfficeWhereInput!]

  """Logical OR on all given filters."""
  OR: [OfficeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OfficeWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  addressOne: String

  """All values that are not equal to given value."""
  addressOne_not: String

  """All values that are contained in given list."""
  addressOne_in: [String!]

  """All values that are not contained in given list."""
  addressOne_not_in: [String!]

  """All values less than the given value."""
  addressOne_lt: String

  """All values less than or equal the given value."""
  addressOne_lte: String

  """All values greater than the given value."""
  addressOne_gt: String

  """All values greater than or equal the given value."""
  addressOne_gte: String

  """All values containing the given string."""
  addressOne_contains: String

  """All values not containing the given string."""
  addressOne_not_contains: String

  """All values starting with the given string."""
  addressOne_starts_with: String

  """All values not starting with the given string."""
  addressOne_not_starts_with: String

  """All values ending with the given string."""
  addressOne_ends_with: String

  """All values not ending with the given string."""
  addressOne_not_ends_with: String
  addressTwo: String

  """All values that are not equal to given value."""
  addressTwo_not: String

  """All values that are contained in given list."""
  addressTwo_in: [String!]

  """All values that are not contained in given list."""
  addressTwo_not_in: [String!]

  """All values less than the given value."""
  addressTwo_lt: String

  """All values less than or equal the given value."""
  addressTwo_lte: String

  """All values greater than the given value."""
  addressTwo_gt: String

  """All values greater than or equal the given value."""
  addressTwo_gte: String

  """All values containing the given string."""
  addressTwo_contains: String

  """All values not containing the given string."""
  addressTwo_not_contains: String

  """All values starting with the given string."""
  addressTwo_starts_with: String

  """All values not starting with the given string."""
  addressTwo_not_starts_with: String

  """All values ending with the given string."""
  addressTwo_ends_with: String

  """All values not ending with the given string."""
  addressTwo_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  hasWarehouse: Boolean

  """All values that are not equal to given value."""
  hasWarehouse_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  stateAbbr: String

  """All values that are not equal to given value."""
  stateAbbr_not: String

  """All values that are contained in given list."""
  stateAbbr_in: [String!]

  """All values that are not contained in given list."""
  stateAbbr_not_in: [String!]

  """All values less than the given value."""
  stateAbbr_lt: String

  """All values less than or equal the given value."""
  stateAbbr_lte: String

  """All values greater than the given value."""
  stateAbbr_gt: String

  """All values greater than or equal the given value."""
  stateAbbr_gte: String

  """All values containing the given string."""
  stateAbbr_contains: String

  """All values not containing the given string."""
  stateAbbr_not_contains: String

  """All values starting with the given string."""
  stateAbbr_starts_with: String

  """All values not starting with the given string."""
  stateAbbr_not_starts_with: String

  """All values ending with the given string."""
  stateAbbr_ends_with: String

  """All values not ending with the given string."""
  stateAbbr_not_ends_with: String
  testOffice: Boolean

  """All values that are not equal to given value."""
  testOffice_not: Boolean
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  salesTeams_every: SalesTeamWhereInput
  salesTeams_some: SalesTeamWhereInput
  salesTeams_none: SalesTeamWhereInput
}

input OfficeWhereUniqueInput {
  id: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  accesses(where: AccessWhereInput, orderBy: AccessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Access]!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  leads(where: LeadWhereInput, orderBy: LeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lead]!
  leadsCampaigns(where: LeadsCampaignWhereInput, orderBy: LeadsCampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LeadsCampaign]!
  leadsSources(where: LeadsSourceWhereInput, orderBy: LeadsSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LeadsSource]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  offices(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Office]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  salesTeams(where: SalesTeamWhereInput, orderBy: SalesTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesTeam]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  access(where: AccessWhereUniqueInput!): Access
  account(where: AccountWhereUniqueInput!): Account
  company(where: CompanyWhereUniqueInput!): Company
  lead(where: LeadWhereUniqueInput!): Lead
  leadsCampaign(where: LeadsCampaignWhereUniqueInput!): LeadsCampaign
  leadsSource(where: LeadsSourceWhereUniqueInput!): LeadsSource
  location(where: LocationWhereUniqueInput!): Location
  office(where: OfficeWhereUniqueInput!): Office
  role(where: RoleWhereUniqueInput!): Role
  salesTeam(where: SalesTeamWhereUniqueInput!): SalesTeam
  user(where: UserWhereUniqueInput!): User
  contact(where: ContactWhereUniqueInput!): Contact
  accessesConnection(where: AccessWhereInput, orderBy: AccessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccessConnection!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  leadsConnection(where: LeadWhereInput, orderBy: LeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeadConnection!
  leadsCampaignsConnection(where: LeadsCampaignWhereInput, orderBy: LeadsCampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeadsCampaignConnection!
  leadsSourcesConnection(where: LeadsSourceWhereInput, orderBy: LeadsSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeadsSourceConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  officesConnection(where: OfficeWhereInput, orderBy: OfficeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfficeConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  salesTeamsConnection(where: SalesTeamWhereInput, orderBy: SalesTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalesTeamConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role {
  id: Int!
  defaultAccess: String
  name: String
  testRole: Boolean
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  defaultAccess: String
  name: String
  testRole: Boolean
  users: UserCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutUsersInput {
  create: RoleCreateWithoutUsersInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutUsersInput {
  defaultAccess: String
  name: String
  testRole: Boolean
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  defaultAccess_ASC
  defaultAccess_DESC
  name_ASC
  name_DESC
  testRole_ASC
  testRole_DESC
}

type RolePreviousValues {
  id: Int!
  defaultAccess: String
  name: String
  testRole: Boolean
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  defaultAccess: String
  name: String
  testRole: Boolean
  users: UserUpdateManyWithoutRoleInput
}

input RoleUpdateManyMutationInput {
  defaultAccess: String
  name: String
  testRole: Boolean
}

input RoleUpdateOneWithoutUsersInput {
  create: RoleCreateWithoutUsersInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RoleUpdateWithoutUsersDataInput
  upsert: RoleUpsertWithoutUsersInput
}

input RoleUpdateWithoutUsersDataInput {
  defaultAccess: String
  name: String
  testRole: Boolean
}

input RoleUpsertWithoutUsersInput {
  update: RoleUpdateWithoutUsersDataInput!
  create: RoleCreateWithoutUsersInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  defaultAccess: String

  """All values that are not equal to given value."""
  defaultAccess_not: String

  """All values that are contained in given list."""
  defaultAccess_in: [String!]

  """All values that are not contained in given list."""
  defaultAccess_not_in: [String!]

  """All values less than the given value."""
  defaultAccess_lt: String

  """All values less than or equal the given value."""
  defaultAccess_lte: String

  """All values greater than the given value."""
  defaultAccess_gt: String

  """All values greater than or equal the given value."""
  defaultAccess_gte: String

  """All values containing the given string."""
  defaultAccess_contains: String

  """All values not containing the given string."""
  defaultAccess_not_contains: String

  """All values starting with the given string."""
  defaultAccess_starts_with: String

  """All values not starting with the given string."""
  defaultAccess_not_starts_with: String

  """All values ending with the given string."""
  defaultAccess_ends_with: String

  """All values not ending with the given string."""
  defaultAccess_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  testRole: Boolean

  """All values that are not equal to given value."""
  testRole_not: Boolean
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: Int
}

type SalesTeam {
  team_id: Int!
  active: Boolean
  name: String
  office: Office
  teamChild: Int
  teamLeadOne: User
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type SalesTeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SalesTeamEdge]!
  aggregate: AggregateSalesTeam!
}

input SalesTeamCreateInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  office: OfficeCreateOneWithoutSalesTeamsInput
  teamLeadOne: UserCreateOneWithoutSalesTeamsInput
  users: UserCreateManyWithoutTeamInput
}

input SalesTeamCreateManyWithoutOfficeInput {
  create: [SalesTeamCreateWithoutOfficeInput!]
  connect: [SalesTeamWhereUniqueInput!]
}

input SalesTeamCreateManyWithoutTeamLeadOneInput {
  create: [SalesTeamCreateWithoutTeamLeadOneInput!]
  connect: [SalesTeamWhereUniqueInput!]
}

input SalesTeamCreateOneWithoutUsersInput {
  create: SalesTeamCreateWithoutUsersInput
  connect: SalesTeamWhereUniqueInput
}

input SalesTeamCreateWithoutOfficeInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  teamLeadOne: UserCreateOneWithoutSalesTeamsInput
  users: UserCreateManyWithoutTeamInput
}

input SalesTeamCreateWithoutTeamLeadOneInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  office: OfficeCreateOneWithoutSalesTeamsInput
  users: UserCreateManyWithoutTeamInput
}

input SalesTeamCreateWithoutUsersInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  office: OfficeCreateOneWithoutSalesTeamsInput
  teamLeadOne: UserCreateOneWithoutSalesTeamsInput
}

"""An edge in a connection."""
type SalesTeamEdge {
  """The item at the end of the edge."""
  node: SalesTeam!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SalesTeamOrderByInput {
  team_id_ASC
  team_id_DESC
  active_ASC
  active_DESC
  name_ASC
  name_DESC
  teamChild_ASC
  teamChild_DESC
  teamLeadTwo_ASC
  teamLeadTwo_DESC
  teamParent_ASC
  teamParent_DESC
  testSalesTeam_ASC
  testSalesTeam_DESC
  type_ASC
  type_DESC
}

type SalesTeamPreviousValues {
  team_id: Int!
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
}

input SalesTeamScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesTeamScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesTeamScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesTeamScalarWhereInput!]
  team_id: Int

  """All values that are not equal to given value."""
  team_id_not: Int

  """All values that are contained in given list."""
  team_id_in: [Int!]

  """All values that are not contained in given list."""
  team_id_not_in: [Int!]

  """All values less than the given value."""
  team_id_lt: Int

  """All values less than or equal the given value."""
  team_id_lte: Int

  """All values greater than the given value."""
  team_id_gt: Int

  """All values greater than or equal the given value."""
  team_id_gte: Int
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  teamChild: Int

  """All values that are not equal to given value."""
  teamChild_not: Int

  """All values that are contained in given list."""
  teamChild_in: [Int!]

  """All values that are not contained in given list."""
  teamChild_not_in: [Int!]

  """All values less than the given value."""
  teamChild_lt: Int

  """All values less than or equal the given value."""
  teamChild_lte: Int

  """All values greater than the given value."""
  teamChild_gt: Int

  """All values greater than or equal the given value."""
  teamChild_gte: Int
  teamLeadTwo: Int

  """All values that are not equal to given value."""
  teamLeadTwo_not: Int

  """All values that are contained in given list."""
  teamLeadTwo_in: [Int!]

  """All values that are not contained in given list."""
  teamLeadTwo_not_in: [Int!]

  """All values less than the given value."""
  teamLeadTwo_lt: Int

  """All values less than or equal the given value."""
  teamLeadTwo_lte: Int

  """All values greater than the given value."""
  teamLeadTwo_gt: Int

  """All values greater than or equal the given value."""
  teamLeadTwo_gte: Int
  teamParent: Int

  """All values that are not equal to given value."""
  teamParent_not: Int

  """All values that are contained in given list."""
  teamParent_in: [Int!]

  """All values that are not contained in given list."""
  teamParent_not_in: [Int!]

  """All values less than the given value."""
  teamParent_lt: Int

  """All values less than or equal the given value."""
  teamParent_lte: Int

  """All values greater than the given value."""
  teamParent_gt: Int

  """All values greater than or equal the given value."""
  teamParent_gte: Int
  testSalesTeam: Boolean

  """All values that are not equal to given value."""
  testSalesTeam_not: Boolean
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
}

type SalesTeamSubscriptionPayload {
  mutation: MutationType!
  node: SalesTeam
  updatedFields: [String!]
  previousValues: SalesTeamPreviousValues
}

input SalesTeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesTeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesTeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesTeamSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SalesTeamWhereInput
}

input SalesTeamUpdateInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  office: OfficeUpdateOneWithoutSalesTeamsInput
  teamLeadOne: UserUpdateOneWithoutSalesTeamsInput
  users: UserUpdateManyWithoutTeamInput
}

input SalesTeamUpdateManyDataInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
}

input SalesTeamUpdateManyMutationInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
}

input SalesTeamUpdateManyWithoutOfficeInput {
  create: [SalesTeamCreateWithoutOfficeInput!]
  connect: [SalesTeamWhereUniqueInput!]
  set: [SalesTeamWhereUniqueInput!]
  disconnect: [SalesTeamWhereUniqueInput!]
  delete: [SalesTeamWhereUniqueInput!]
  update: [SalesTeamUpdateWithWhereUniqueWithoutOfficeInput!]
  updateMany: [SalesTeamUpdateManyWithWhereNestedInput!]
  deleteMany: [SalesTeamScalarWhereInput!]
  upsert: [SalesTeamUpsertWithWhereUniqueWithoutOfficeInput!]
}

input SalesTeamUpdateManyWithoutTeamLeadOneInput {
  create: [SalesTeamCreateWithoutTeamLeadOneInput!]
  connect: [SalesTeamWhereUniqueInput!]
  set: [SalesTeamWhereUniqueInput!]
  disconnect: [SalesTeamWhereUniqueInput!]
  delete: [SalesTeamWhereUniqueInput!]
  update: [SalesTeamUpdateWithWhereUniqueWithoutTeamLeadOneInput!]
  updateMany: [SalesTeamUpdateManyWithWhereNestedInput!]
  deleteMany: [SalesTeamScalarWhereInput!]
  upsert: [SalesTeamUpsertWithWhereUniqueWithoutTeamLeadOneInput!]
}

input SalesTeamUpdateManyWithWhereNestedInput {
  where: SalesTeamScalarWhereInput!
  data: SalesTeamUpdateManyDataInput!
}

input SalesTeamUpdateOneWithoutUsersInput {
  create: SalesTeamCreateWithoutUsersInput
  connect: SalesTeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SalesTeamUpdateWithoutUsersDataInput
  upsert: SalesTeamUpsertWithoutUsersInput
}

input SalesTeamUpdateWithoutOfficeDataInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  teamLeadOne: UserUpdateOneWithoutSalesTeamsInput
  users: UserUpdateManyWithoutTeamInput
}

input SalesTeamUpdateWithoutTeamLeadOneDataInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  office: OfficeUpdateOneWithoutSalesTeamsInput
  users: UserUpdateManyWithoutTeamInput
}

input SalesTeamUpdateWithoutUsersDataInput {
  active: Boolean
  name: String
  teamChild: Int
  teamLeadTwo: Int
  teamParent: Int
  testSalesTeam: Boolean
  type: String
  office: OfficeUpdateOneWithoutSalesTeamsInput
  teamLeadOne: UserUpdateOneWithoutSalesTeamsInput
}

input SalesTeamUpdateWithWhereUniqueWithoutOfficeInput {
  where: SalesTeamWhereUniqueInput!
  data: SalesTeamUpdateWithoutOfficeDataInput!
}

input SalesTeamUpdateWithWhereUniqueWithoutTeamLeadOneInput {
  where: SalesTeamWhereUniqueInput!
  data: SalesTeamUpdateWithoutTeamLeadOneDataInput!
}

input SalesTeamUpsertWithoutUsersInput {
  update: SalesTeamUpdateWithoutUsersDataInput!
  create: SalesTeamCreateWithoutUsersInput!
}

input SalesTeamUpsertWithWhereUniqueWithoutOfficeInput {
  where: SalesTeamWhereUniqueInput!
  update: SalesTeamUpdateWithoutOfficeDataInput!
  create: SalesTeamCreateWithoutOfficeInput!
}

input SalesTeamUpsertWithWhereUniqueWithoutTeamLeadOneInput {
  where: SalesTeamWhereUniqueInput!
  update: SalesTeamUpdateWithoutTeamLeadOneDataInput!
  create: SalesTeamCreateWithoutTeamLeadOneInput!
}

input SalesTeamWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesTeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesTeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesTeamWhereInput!]
  team_id: Int

  """All values that are not equal to given value."""
  team_id_not: Int

  """All values that are contained in given list."""
  team_id_in: [Int!]

  """All values that are not contained in given list."""
  team_id_not_in: [Int!]

  """All values less than the given value."""
  team_id_lt: Int

  """All values less than or equal the given value."""
  team_id_lte: Int

  """All values greater than the given value."""
  team_id_gt: Int

  """All values greater than or equal the given value."""
  team_id_gte: Int
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  teamChild: Int

  """All values that are not equal to given value."""
  teamChild_not: Int

  """All values that are contained in given list."""
  teamChild_in: [Int!]

  """All values that are not contained in given list."""
  teamChild_not_in: [Int!]

  """All values less than the given value."""
  teamChild_lt: Int

  """All values less than or equal the given value."""
  teamChild_lte: Int

  """All values greater than the given value."""
  teamChild_gt: Int

  """All values greater than or equal the given value."""
  teamChild_gte: Int
  teamLeadTwo: Int

  """All values that are not equal to given value."""
  teamLeadTwo_not: Int

  """All values that are contained in given list."""
  teamLeadTwo_in: [Int!]

  """All values that are not contained in given list."""
  teamLeadTwo_not_in: [Int!]

  """All values less than the given value."""
  teamLeadTwo_lt: Int

  """All values less than or equal the given value."""
  teamLeadTwo_lte: Int

  """All values greater than the given value."""
  teamLeadTwo_gt: Int

  """All values greater than or equal the given value."""
  teamLeadTwo_gte: Int
  teamParent: Int

  """All values that are not equal to given value."""
  teamParent_not: Int

  """All values that are contained in given list."""
  teamParent_in: [Int!]

  """All values that are not contained in given list."""
  teamParent_not_in: [Int!]

  """All values less than the given value."""
  teamParent_lt: Int

  """All values less than or equal the given value."""
  teamParent_lte: Int

  """All values greater than the given value."""
  teamParent_gt: Int

  """All values greater than or equal the given value."""
  teamParent_gte: Int
  testSalesTeam: Boolean

  """All values that are not equal to given value."""
  testSalesTeam_not: Boolean
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  office: OfficeWhereInput
  teamLeadOne: UserWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input SalesTeamWhereUniqueInput {
  team_id: Int
}

type Subscription {
  access(where: AccessSubscriptionWhereInput): AccessSubscriptionPayload
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  lead(where: LeadSubscriptionWhereInput): LeadSubscriptionPayload
  leadsCampaign(where: LeadsCampaignSubscriptionWhereInput): LeadsCampaignSubscriptionPayload
  leadsSource(where: LeadsSourceSubscriptionWhereInput): LeadsSourceSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  office(where: OfficeSubscriptionWhereInput): OfficeSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  salesTeam(where: SalesTeamSubscriptionWhereInput): SalesTeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
}

type User {
  id: Int!
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  company: Company
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  leads(where: LeadWhereInput, orderBy: LeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lead!]
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  role: Role
  salesTeams(where: SalesTeamWhereInput, orderBy: SalesTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesTeam!]
  securityPin: Int
  stateAbbr: String
  suffix: String
  team: SalesTeam
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyCreateOneWithoutUsersInput
  leads: LeadCreateManyWithoutLeadCreatorInput
  role: RoleCreateOneWithoutUsersInput
  salesTeams: SalesTeamCreateManyWithoutTeamLeadOneInput
  team: SalesTeamCreateOneWithoutUsersInput
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLeadsInput {
  create: UserCreateWithoutLeadsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSalesTeamsInput {
  create: UserCreateWithoutSalesTeamsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompanyInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  leads: LeadCreateManyWithoutLeadCreatorInput
  role: RoleCreateOneWithoutUsersInput
  salesTeams: SalesTeamCreateManyWithoutTeamLeadOneInput
  team: SalesTeamCreateOneWithoutUsersInput
}

input UserCreateWithoutLeadsInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyCreateOneWithoutUsersInput
  role: RoleCreateOneWithoutUsersInput
  salesTeams: SalesTeamCreateManyWithoutTeamLeadOneInput
  team: SalesTeamCreateOneWithoutUsersInput
}

input UserCreateWithoutRoleInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyCreateOneWithoutUsersInput
  leads: LeadCreateManyWithoutLeadCreatorInput
  salesTeams: SalesTeamCreateManyWithoutTeamLeadOneInput
  team: SalesTeamCreateOneWithoutUsersInput
}

input UserCreateWithoutSalesTeamsInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyCreateOneWithoutUsersInput
  leads: LeadCreateManyWithoutLeadCreatorInput
  role: RoleCreateOneWithoutUsersInput
  team: SalesTeamCreateOneWithoutUsersInput
}

input UserCreateWithoutTeamInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyCreateOneWithoutUsersInput
  leads: LeadCreateManyWithoutLeadCreatorInput
  role: RoleCreateOneWithoutUsersInput
  salesTeams: SalesTeamCreateManyWithoutTeamLeadOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  access_ASC
  access_DESC
  addressOne_ASC
  addressOne_DESC
  addressTwo_ASC
  addressTwo_DESC
  areaId_ASC
  areaId_DESC
  city_ASC
  city_DESC
  createdBy_ASC
  createdBy_DESC
  emailNerd_ASC
  emailNerd_DESC
  emailPersonal_ASC
  emailPersonal_DESC
  employmentStatus_ASC
  employmentStatus_DESC
  entityType_ASC
  entityType_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  payrollId_ASC
  payrollId_DESC
  phoneCell_ASC
  phoneCell_DESC
  phoneCellCarrier_ASC
  phoneCellCarrier_DESC
  phoneHome_ASC
  phoneHome_DESC
  referredBy_ASC
  referredBy_DESC
  securityPin_ASC
  securityPin_DESC
  stateAbbr_ASC
  stateAbbr_DESC
  suffix_ASC
  suffix_DESC
  teamPositionId_ASC
  teamPositionId_DESC
  testUser_ASC
  testUser_DESC
  thirdPartyIds_ASC
  thirdPartyIds_DESC
  zip_ASC
  zip_DESC
}

type UserPreviousValues {
  id: Int!
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  access: String

  """All values that are not equal to given value."""
  access_not: String

  """All values that are contained in given list."""
  access_in: [String!]

  """All values that are not contained in given list."""
  access_not_in: [String!]

  """All values less than the given value."""
  access_lt: String

  """All values less than or equal the given value."""
  access_lte: String

  """All values greater than the given value."""
  access_gt: String

  """All values greater than or equal the given value."""
  access_gte: String

  """All values containing the given string."""
  access_contains: String

  """All values not containing the given string."""
  access_not_contains: String

  """All values starting with the given string."""
  access_starts_with: String

  """All values not starting with the given string."""
  access_not_starts_with: String

  """All values ending with the given string."""
  access_ends_with: String

  """All values not ending with the given string."""
  access_not_ends_with: String
  addressOne: String

  """All values that are not equal to given value."""
  addressOne_not: String

  """All values that are contained in given list."""
  addressOne_in: [String!]

  """All values that are not contained in given list."""
  addressOne_not_in: [String!]

  """All values less than the given value."""
  addressOne_lt: String

  """All values less than or equal the given value."""
  addressOne_lte: String

  """All values greater than the given value."""
  addressOne_gt: String

  """All values greater than or equal the given value."""
  addressOne_gte: String

  """All values containing the given string."""
  addressOne_contains: String

  """All values not containing the given string."""
  addressOne_not_contains: String

  """All values starting with the given string."""
  addressOne_starts_with: String

  """All values not starting with the given string."""
  addressOne_not_starts_with: String

  """All values ending with the given string."""
  addressOne_ends_with: String

  """All values not ending with the given string."""
  addressOne_not_ends_with: String
  addressTwo: String

  """All values that are not equal to given value."""
  addressTwo_not: String

  """All values that are contained in given list."""
  addressTwo_in: [String!]

  """All values that are not contained in given list."""
  addressTwo_not_in: [String!]

  """All values less than the given value."""
  addressTwo_lt: String

  """All values less than or equal the given value."""
  addressTwo_lte: String

  """All values greater than the given value."""
  addressTwo_gt: String

  """All values greater than or equal the given value."""
  addressTwo_gte: String

  """All values containing the given string."""
  addressTwo_contains: String

  """All values not containing the given string."""
  addressTwo_not_contains: String

  """All values starting with the given string."""
  addressTwo_starts_with: String

  """All values not starting with the given string."""
  addressTwo_not_starts_with: String

  """All values ending with the given string."""
  addressTwo_ends_with: String

  """All values not ending with the given string."""
  addressTwo_not_ends_with: String
  areaId: Int

  """All values that are not equal to given value."""
  areaId_not: Int

  """All values that are contained in given list."""
  areaId_in: [Int!]

  """All values that are not contained in given list."""
  areaId_not_in: [Int!]

  """All values less than the given value."""
  areaId_lt: Int

  """All values less than or equal the given value."""
  areaId_lte: Int

  """All values greater than the given value."""
  areaId_gt: Int

  """All values greater than or equal the given value."""
  areaId_gte: Int
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  createdBy: Int

  """All values that are not equal to given value."""
  createdBy_not: Int

  """All values that are contained in given list."""
  createdBy_in: [Int!]

  """All values that are not contained in given list."""
  createdBy_not_in: [Int!]

  """All values less than the given value."""
  createdBy_lt: Int

  """All values less than or equal the given value."""
  createdBy_lte: Int

  """All values greater than the given value."""
  createdBy_gt: Int

  """All values greater than or equal the given value."""
  createdBy_gte: Int
  emailNerd: String

  """All values that are not equal to given value."""
  emailNerd_not: String

  """All values that are contained in given list."""
  emailNerd_in: [String!]

  """All values that are not contained in given list."""
  emailNerd_not_in: [String!]

  """All values less than the given value."""
  emailNerd_lt: String

  """All values less than or equal the given value."""
  emailNerd_lte: String

  """All values greater than the given value."""
  emailNerd_gt: String

  """All values greater than or equal the given value."""
  emailNerd_gte: String

  """All values containing the given string."""
  emailNerd_contains: String

  """All values not containing the given string."""
  emailNerd_not_contains: String

  """All values starting with the given string."""
  emailNerd_starts_with: String

  """All values not starting with the given string."""
  emailNerd_not_starts_with: String

  """All values ending with the given string."""
  emailNerd_ends_with: String

  """All values not ending with the given string."""
  emailNerd_not_ends_with: String
  emailPersonal: String

  """All values that are not equal to given value."""
  emailPersonal_not: String

  """All values that are contained in given list."""
  emailPersonal_in: [String!]

  """All values that are not contained in given list."""
  emailPersonal_not_in: [String!]

  """All values less than the given value."""
  emailPersonal_lt: String

  """All values less than or equal the given value."""
  emailPersonal_lte: String

  """All values greater than the given value."""
  emailPersonal_gt: String

  """All values greater than or equal the given value."""
  emailPersonal_gte: String

  """All values containing the given string."""
  emailPersonal_contains: String

  """All values not containing the given string."""
  emailPersonal_not_contains: String

  """All values starting with the given string."""
  emailPersonal_starts_with: String

  """All values not starting with the given string."""
  emailPersonal_not_starts_with: String

  """All values ending with the given string."""
  emailPersonal_ends_with: String

  """All values not ending with the given string."""
  emailPersonal_not_ends_with: String
  employmentStatus: Boolean

  """All values that are not equal to given value."""
  employmentStatus_not: Boolean
  entityType: String

  """All values that are not equal to given value."""
  entityType_not: String

  """All values that are contained in given list."""
  entityType_in: [String!]

  """All values that are not contained in given list."""
  entityType_not_in: [String!]

  """All values less than the given value."""
  entityType_lt: String

  """All values less than or equal the given value."""
  entityType_lte: String

  """All values greater than the given value."""
  entityType_gt: String

  """All values greater than or equal the given value."""
  entityType_gte: String

  """All values containing the given string."""
  entityType_contains: String

  """All values not containing the given string."""
  entityType_not_contains: String

  """All values starting with the given string."""
  entityType_starts_with: String

  """All values not starting with the given string."""
  entityType_not_starts_with: String

  """All values ending with the given string."""
  entityType_ends_with: String

  """All values not ending with the given string."""
  entityType_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  payrollId: Int

  """All values that are not equal to given value."""
  payrollId_not: Int

  """All values that are contained in given list."""
  payrollId_in: [Int!]

  """All values that are not contained in given list."""
  payrollId_not_in: [Int!]

  """All values less than the given value."""
  payrollId_lt: Int

  """All values less than or equal the given value."""
  payrollId_lte: Int

  """All values greater than the given value."""
  payrollId_gt: Int

  """All values greater than or equal the given value."""
  payrollId_gte: Int
  phoneCell: String

  """All values that are not equal to given value."""
  phoneCell_not: String

  """All values that are contained in given list."""
  phoneCell_in: [String!]

  """All values that are not contained in given list."""
  phoneCell_not_in: [String!]

  """All values less than the given value."""
  phoneCell_lt: String

  """All values less than or equal the given value."""
  phoneCell_lte: String

  """All values greater than the given value."""
  phoneCell_gt: String

  """All values greater than or equal the given value."""
  phoneCell_gte: String

  """All values containing the given string."""
  phoneCell_contains: String

  """All values not containing the given string."""
  phoneCell_not_contains: String

  """All values starting with the given string."""
  phoneCell_starts_with: String

  """All values not starting with the given string."""
  phoneCell_not_starts_with: String

  """All values ending with the given string."""
  phoneCell_ends_with: String

  """All values not ending with the given string."""
  phoneCell_not_ends_with: String
  phoneCellCarrier: String

  """All values that are not equal to given value."""
  phoneCellCarrier_not: String

  """All values that are contained in given list."""
  phoneCellCarrier_in: [String!]

  """All values that are not contained in given list."""
  phoneCellCarrier_not_in: [String!]

  """All values less than the given value."""
  phoneCellCarrier_lt: String

  """All values less than or equal the given value."""
  phoneCellCarrier_lte: String

  """All values greater than the given value."""
  phoneCellCarrier_gt: String

  """All values greater than or equal the given value."""
  phoneCellCarrier_gte: String

  """All values containing the given string."""
  phoneCellCarrier_contains: String

  """All values not containing the given string."""
  phoneCellCarrier_not_contains: String

  """All values starting with the given string."""
  phoneCellCarrier_starts_with: String

  """All values not starting with the given string."""
  phoneCellCarrier_not_starts_with: String

  """All values ending with the given string."""
  phoneCellCarrier_ends_with: String

  """All values not ending with the given string."""
  phoneCellCarrier_not_ends_with: String
  phoneHome: String

  """All values that are not equal to given value."""
  phoneHome_not: String

  """All values that are contained in given list."""
  phoneHome_in: [String!]

  """All values that are not contained in given list."""
  phoneHome_not_in: [String!]

  """All values less than the given value."""
  phoneHome_lt: String

  """All values less than or equal the given value."""
  phoneHome_lte: String

  """All values greater than the given value."""
  phoneHome_gt: String

  """All values greater than or equal the given value."""
  phoneHome_gte: String

  """All values containing the given string."""
  phoneHome_contains: String

  """All values not containing the given string."""
  phoneHome_not_contains: String

  """All values starting with the given string."""
  phoneHome_starts_with: String

  """All values not starting with the given string."""
  phoneHome_not_starts_with: String

  """All values ending with the given string."""
  phoneHome_ends_with: String

  """All values not ending with the given string."""
  phoneHome_not_ends_with: String
  referredBy: Int

  """All values that are not equal to given value."""
  referredBy_not: Int

  """All values that are contained in given list."""
  referredBy_in: [Int!]

  """All values that are not contained in given list."""
  referredBy_not_in: [Int!]

  """All values less than the given value."""
  referredBy_lt: Int

  """All values less than or equal the given value."""
  referredBy_lte: Int

  """All values greater than the given value."""
  referredBy_gt: Int

  """All values greater than or equal the given value."""
  referredBy_gte: Int
  securityPin: Int

  """All values that are not equal to given value."""
  securityPin_not: Int

  """All values that are contained in given list."""
  securityPin_in: [Int!]

  """All values that are not contained in given list."""
  securityPin_not_in: [Int!]

  """All values less than the given value."""
  securityPin_lt: Int

  """All values less than or equal the given value."""
  securityPin_lte: Int

  """All values greater than the given value."""
  securityPin_gt: Int

  """All values greater than or equal the given value."""
  securityPin_gte: Int
  stateAbbr: String

  """All values that are not equal to given value."""
  stateAbbr_not: String

  """All values that are contained in given list."""
  stateAbbr_in: [String!]

  """All values that are not contained in given list."""
  stateAbbr_not_in: [String!]

  """All values less than the given value."""
  stateAbbr_lt: String

  """All values less than or equal the given value."""
  stateAbbr_lte: String

  """All values greater than the given value."""
  stateAbbr_gt: String

  """All values greater than or equal the given value."""
  stateAbbr_gte: String

  """All values containing the given string."""
  stateAbbr_contains: String

  """All values not containing the given string."""
  stateAbbr_not_contains: String

  """All values starting with the given string."""
  stateAbbr_starts_with: String

  """All values not starting with the given string."""
  stateAbbr_not_starts_with: String

  """All values ending with the given string."""
  stateAbbr_ends_with: String

  """All values not ending with the given string."""
  stateAbbr_not_ends_with: String
  suffix: String

  """All values that are not equal to given value."""
  suffix_not: String

  """All values that are contained in given list."""
  suffix_in: [String!]

  """All values that are not contained in given list."""
  suffix_not_in: [String!]

  """All values less than the given value."""
  suffix_lt: String

  """All values less than or equal the given value."""
  suffix_lte: String

  """All values greater than the given value."""
  suffix_gt: String

  """All values greater than or equal the given value."""
  suffix_gte: String

  """All values containing the given string."""
  suffix_contains: String

  """All values not containing the given string."""
  suffix_not_contains: String

  """All values starting with the given string."""
  suffix_starts_with: String

  """All values not starting with the given string."""
  suffix_not_starts_with: String

  """All values ending with the given string."""
  suffix_ends_with: String

  """All values not ending with the given string."""
  suffix_not_ends_with: String
  teamPositionId: Int

  """All values that are not equal to given value."""
  teamPositionId_not: Int

  """All values that are contained in given list."""
  teamPositionId_in: [Int!]

  """All values that are not contained in given list."""
  teamPositionId_not_in: [Int!]

  """All values less than the given value."""
  teamPositionId_lt: Int

  """All values less than or equal the given value."""
  teamPositionId_lte: Int

  """All values greater than the given value."""
  teamPositionId_gt: Int

  """All values greater than or equal the given value."""
  teamPositionId_gte: Int
  testUser: Boolean

  """All values that are not equal to given value."""
  testUser_not: Boolean
  thirdPartyIds: String

  """All values that are not equal to given value."""
  thirdPartyIds_not: String

  """All values that are contained in given list."""
  thirdPartyIds_in: [String!]

  """All values that are not contained in given list."""
  thirdPartyIds_not_in: [String!]

  """All values less than the given value."""
  thirdPartyIds_lt: String

  """All values less than or equal the given value."""
  thirdPartyIds_lte: String

  """All values greater than the given value."""
  thirdPartyIds_gt: String

  """All values greater than or equal the given value."""
  thirdPartyIds_gte: String

  """All values containing the given string."""
  thirdPartyIds_contains: String

  """All values not containing the given string."""
  thirdPartyIds_not_contains: String

  """All values starting with the given string."""
  thirdPartyIds_starts_with: String

  """All values not starting with the given string."""
  thirdPartyIds_not_starts_with: String

  """All values ending with the given string."""
  thirdPartyIds_ends_with: String

  """All values not ending with the given string."""
  thirdPartyIds_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyUpdateOneWithoutUsersInput
  leads: LeadUpdateManyWithoutLeadCreatorInput
  role: RoleUpdateOneWithoutUsersInput
  salesTeams: SalesTeamUpdateManyWithoutTeamLeadOneInput
  team: SalesTeamUpdateOneWithoutUsersInput
}

input UserUpdateInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyUpdateOneWithoutUsersInput
  leads: LeadUpdateManyWithoutLeadCreatorInput
  role: RoleUpdateOneWithoutUsersInput
  salesTeams: SalesTeamUpdateManyWithoutTeamLeadOneInput
  team: SalesTeamUpdateOneWithoutUsersInput
}

input UserUpdateManyDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
}

input UserUpdateManyMutationInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
}

input UserUpdateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
}

input UserUpdateManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoleInput!]
}

input UserUpdateManyWithoutTeamInput {
  create: [UserCreateWithoutTeamInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutLeadsInput {
  create: UserCreateWithoutLeadsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLeadsDataInput
  upsert: UserUpsertWithoutLeadsInput
}

input UserUpdateOneWithoutSalesTeamsInput {
  create: UserCreateWithoutSalesTeamsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSalesTeamsDataInput
  upsert: UserUpsertWithoutSalesTeamsInput
}

input UserUpdateWithoutCompanyDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  leads: LeadUpdateManyWithoutLeadCreatorInput
  role: RoleUpdateOneWithoutUsersInput
  salesTeams: SalesTeamUpdateManyWithoutTeamLeadOneInput
  team: SalesTeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutLeadsDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyUpdateOneWithoutUsersInput
  role: RoleUpdateOneWithoutUsersInput
  salesTeams: SalesTeamUpdateManyWithoutTeamLeadOneInput
  team: SalesTeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutRoleDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyUpdateOneWithoutUsersInput
  leads: LeadUpdateManyWithoutLeadCreatorInput
  salesTeams: SalesTeamUpdateManyWithoutTeamLeadOneInput
  team: SalesTeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutSalesTeamsDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyUpdateOneWithoutUsersInput
  leads: LeadUpdateManyWithoutLeadCreatorInput
  role: RoleUpdateOneWithoutUsersInput
  team: SalesTeamUpdateOneWithoutUsersInput
}

input UserUpdateWithoutTeamDataInput {
  access: String
  addressOne: String
  addressTwo: String
  areaId: Int
  city: String
  createdBy: Int
  emailNerd: String
  emailPersonal: String
  employmentStatus: Boolean
  entityType: String
  firstName: String
  lastName: String
  payrollId: Int
  phoneCell: String
  phoneCellCarrier: String
  phoneHome: String
  referredBy: Int
  securityPin: Int
  stateAbbr: String
  suffix: String
  teamPositionId: Int
  testUser: Boolean
  thirdPartyIds: String
  zip: String
  company: CompanyUpdateOneWithoutUsersInput
  leads: LeadUpdateManyWithoutLeadCreatorInput
  role: RoleUpdateOneWithoutUsersInput
  salesTeams: SalesTeamUpdateManyWithoutTeamLeadOneInput
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoleDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutLeadsInput {
  update: UserUpdateWithoutLeadsDataInput!
  create: UserCreateWithoutLeadsInput!
}

input UserUpsertWithoutSalesTeamsInput {
  update: UserUpdateWithoutSalesTeamsDataInput!
  create: UserCreateWithoutSalesTeamsInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpsertWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoleDataInput!
  create: UserCreateWithoutRoleInput!
}

input UserUpsertWithWhereUniqueWithoutTeamInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamDataInput!
  create: UserCreateWithoutTeamInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  access: String

  """All values that are not equal to given value."""
  access_not: String

  """All values that are contained in given list."""
  access_in: [String!]

  """All values that are not contained in given list."""
  access_not_in: [String!]

  """All values less than the given value."""
  access_lt: String

  """All values less than or equal the given value."""
  access_lte: String

  """All values greater than the given value."""
  access_gt: String

  """All values greater than or equal the given value."""
  access_gte: String

  """All values containing the given string."""
  access_contains: String

  """All values not containing the given string."""
  access_not_contains: String

  """All values starting with the given string."""
  access_starts_with: String

  """All values not starting with the given string."""
  access_not_starts_with: String

  """All values ending with the given string."""
  access_ends_with: String

  """All values not ending with the given string."""
  access_not_ends_with: String
  addressOne: String

  """All values that are not equal to given value."""
  addressOne_not: String

  """All values that are contained in given list."""
  addressOne_in: [String!]

  """All values that are not contained in given list."""
  addressOne_not_in: [String!]

  """All values less than the given value."""
  addressOne_lt: String

  """All values less than or equal the given value."""
  addressOne_lte: String

  """All values greater than the given value."""
  addressOne_gt: String

  """All values greater than or equal the given value."""
  addressOne_gte: String

  """All values containing the given string."""
  addressOne_contains: String

  """All values not containing the given string."""
  addressOne_not_contains: String

  """All values starting with the given string."""
  addressOne_starts_with: String

  """All values not starting with the given string."""
  addressOne_not_starts_with: String

  """All values ending with the given string."""
  addressOne_ends_with: String

  """All values not ending with the given string."""
  addressOne_not_ends_with: String
  addressTwo: String

  """All values that are not equal to given value."""
  addressTwo_not: String

  """All values that are contained in given list."""
  addressTwo_in: [String!]

  """All values that are not contained in given list."""
  addressTwo_not_in: [String!]

  """All values less than the given value."""
  addressTwo_lt: String

  """All values less than or equal the given value."""
  addressTwo_lte: String

  """All values greater than the given value."""
  addressTwo_gt: String

  """All values greater than or equal the given value."""
  addressTwo_gte: String

  """All values containing the given string."""
  addressTwo_contains: String

  """All values not containing the given string."""
  addressTwo_not_contains: String

  """All values starting with the given string."""
  addressTwo_starts_with: String

  """All values not starting with the given string."""
  addressTwo_not_starts_with: String

  """All values ending with the given string."""
  addressTwo_ends_with: String

  """All values not ending with the given string."""
  addressTwo_not_ends_with: String
  areaId: Int

  """All values that are not equal to given value."""
  areaId_not: Int

  """All values that are contained in given list."""
  areaId_in: [Int!]

  """All values that are not contained in given list."""
  areaId_not_in: [Int!]

  """All values less than the given value."""
  areaId_lt: Int

  """All values less than or equal the given value."""
  areaId_lte: Int

  """All values greater than the given value."""
  areaId_gt: Int

  """All values greater than or equal the given value."""
  areaId_gte: Int
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  createdBy: Int

  """All values that are not equal to given value."""
  createdBy_not: Int

  """All values that are contained in given list."""
  createdBy_in: [Int!]

  """All values that are not contained in given list."""
  createdBy_not_in: [Int!]

  """All values less than the given value."""
  createdBy_lt: Int

  """All values less than or equal the given value."""
  createdBy_lte: Int

  """All values greater than the given value."""
  createdBy_gt: Int

  """All values greater than or equal the given value."""
  createdBy_gte: Int
  emailNerd: String

  """All values that are not equal to given value."""
  emailNerd_not: String

  """All values that are contained in given list."""
  emailNerd_in: [String!]

  """All values that are not contained in given list."""
  emailNerd_not_in: [String!]

  """All values less than the given value."""
  emailNerd_lt: String

  """All values less than or equal the given value."""
  emailNerd_lte: String

  """All values greater than the given value."""
  emailNerd_gt: String

  """All values greater than or equal the given value."""
  emailNerd_gte: String

  """All values containing the given string."""
  emailNerd_contains: String

  """All values not containing the given string."""
  emailNerd_not_contains: String

  """All values starting with the given string."""
  emailNerd_starts_with: String

  """All values not starting with the given string."""
  emailNerd_not_starts_with: String

  """All values ending with the given string."""
  emailNerd_ends_with: String

  """All values not ending with the given string."""
  emailNerd_not_ends_with: String
  emailPersonal: String

  """All values that are not equal to given value."""
  emailPersonal_not: String

  """All values that are contained in given list."""
  emailPersonal_in: [String!]

  """All values that are not contained in given list."""
  emailPersonal_not_in: [String!]

  """All values less than the given value."""
  emailPersonal_lt: String

  """All values less than or equal the given value."""
  emailPersonal_lte: String

  """All values greater than the given value."""
  emailPersonal_gt: String

  """All values greater than or equal the given value."""
  emailPersonal_gte: String

  """All values containing the given string."""
  emailPersonal_contains: String

  """All values not containing the given string."""
  emailPersonal_not_contains: String

  """All values starting with the given string."""
  emailPersonal_starts_with: String

  """All values not starting with the given string."""
  emailPersonal_not_starts_with: String

  """All values ending with the given string."""
  emailPersonal_ends_with: String

  """All values not ending with the given string."""
  emailPersonal_not_ends_with: String
  employmentStatus: Boolean

  """All values that are not equal to given value."""
  employmentStatus_not: Boolean
  entityType: String

  """All values that are not equal to given value."""
  entityType_not: String

  """All values that are contained in given list."""
  entityType_in: [String!]

  """All values that are not contained in given list."""
  entityType_not_in: [String!]

  """All values less than the given value."""
  entityType_lt: String

  """All values less than or equal the given value."""
  entityType_lte: String

  """All values greater than the given value."""
  entityType_gt: String

  """All values greater than or equal the given value."""
  entityType_gte: String

  """All values containing the given string."""
  entityType_contains: String

  """All values not containing the given string."""
  entityType_not_contains: String

  """All values starting with the given string."""
  entityType_starts_with: String

  """All values not starting with the given string."""
  entityType_not_starts_with: String

  """All values ending with the given string."""
  entityType_ends_with: String

  """All values not ending with the given string."""
  entityType_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  payrollId: Int

  """All values that are not equal to given value."""
  payrollId_not: Int

  """All values that are contained in given list."""
  payrollId_in: [Int!]

  """All values that are not contained in given list."""
  payrollId_not_in: [Int!]

  """All values less than the given value."""
  payrollId_lt: Int

  """All values less than or equal the given value."""
  payrollId_lte: Int

  """All values greater than the given value."""
  payrollId_gt: Int

  """All values greater than or equal the given value."""
  payrollId_gte: Int
  phoneCell: String

  """All values that are not equal to given value."""
  phoneCell_not: String

  """All values that are contained in given list."""
  phoneCell_in: [String!]

  """All values that are not contained in given list."""
  phoneCell_not_in: [String!]

  """All values less than the given value."""
  phoneCell_lt: String

  """All values less than or equal the given value."""
  phoneCell_lte: String

  """All values greater than the given value."""
  phoneCell_gt: String

  """All values greater than or equal the given value."""
  phoneCell_gte: String

  """All values containing the given string."""
  phoneCell_contains: String

  """All values not containing the given string."""
  phoneCell_not_contains: String

  """All values starting with the given string."""
  phoneCell_starts_with: String

  """All values not starting with the given string."""
  phoneCell_not_starts_with: String

  """All values ending with the given string."""
  phoneCell_ends_with: String

  """All values not ending with the given string."""
  phoneCell_not_ends_with: String
  phoneCellCarrier: String

  """All values that are not equal to given value."""
  phoneCellCarrier_not: String

  """All values that are contained in given list."""
  phoneCellCarrier_in: [String!]

  """All values that are not contained in given list."""
  phoneCellCarrier_not_in: [String!]

  """All values less than the given value."""
  phoneCellCarrier_lt: String

  """All values less than or equal the given value."""
  phoneCellCarrier_lte: String

  """All values greater than the given value."""
  phoneCellCarrier_gt: String

  """All values greater than or equal the given value."""
  phoneCellCarrier_gte: String

  """All values containing the given string."""
  phoneCellCarrier_contains: String

  """All values not containing the given string."""
  phoneCellCarrier_not_contains: String

  """All values starting with the given string."""
  phoneCellCarrier_starts_with: String

  """All values not starting with the given string."""
  phoneCellCarrier_not_starts_with: String

  """All values ending with the given string."""
  phoneCellCarrier_ends_with: String

  """All values not ending with the given string."""
  phoneCellCarrier_not_ends_with: String
  phoneHome: String

  """All values that are not equal to given value."""
  phoneHome_not: String

  """All values that are contained in given list."""
  phoneHome_in: [String!]

  """All values that are not contained in given list."""
  phoneHome_not_in: [String!]

  """All values less than the given value."""
  phoneHome_lt: String

  """All values less than or equal the given value."""
  phoneHome_lte: String

  """All values greater than the given value."""
  phoneHome_gt: String

  """All values greater than or equal the given value."""
  phoneHome_gte: String

  """All values containing the given string."""
  phoneHome_contains: String

  """All values not containing the given string."""
  phoneHome_not_contains: String

  """All values starting with the given string."""
  phoneHome_starts_with: String

  """All values not starting with the given string."""
  phoneHome_not_starts_with: String

  """All values ending with the given string."""
  phoneHome_ends_with: String

  """All values not ending with the given string."""
  phoneHome_not_ends_with: String
  referredBy: Int

  """All values that are not equal to given value."""
  referredBy_not: Int

  """All values that are contained in given list."""
  referredBy_in: [Int!]

  """All values that are not contained in given list."""
  referredBy_not_in: [Int!]

  """All values less than the given value."""
  referredBy_lt: Int

  """All values less than or equal the given value."""
  referredBy_lte: Int

  """All values greater than the given value."""
  referredBy_gt: Int

  """All values greater than or equal the given value."""
  referredBy_gte: Int
  securityPin: Int

  """All values that are not equal to given value."""
  securityPin_not: Int

  """All values that are contained in given list."""
  securityPin_in: [Int!]

  """All values that are not contained in given list."""
  securityPin_not_in: [Int!]

  """All values less than the given value."""
  securityPin_lt: Int

  """All values less than or equal the given value."""
  securityPin_lte: Int

  """All values greater than the given value."""
  securityPin_gt: Int

  """All values greater than or equal the given value."""
  securityPin_gte: Int
  stateAbbr: String

  """All values that are not equal to given value."""
  stateAbbr_not: String

  """All values that are contained in given list."""
  stateAbbr_in: [String!]

  """All values that are not contained in given list."""
  stateAbbr_not_in: [String!]

  """All values less than the given value."""
  stateAbbr_lt: String

  """All values less than or equal the given value."""
  stateAbbr_lte: String

  """All values greater than the given value."""
  stateAbbr_gt: String

  """All values greater than or equal the given value."""
  stateAbbr_gte: String

  """All values containing the given string."""
  stateAbbr_contains: String

  """All values not containing the given string."""
  stateAbbr_not_contains: String

  """All values starting with the given string."""
  stateAbbr_starts_with: String

  """All values not starting with the given string."""
  stateAbbr_not_starts_with: String

  """All values ending with the given string."""
  stateAbbr_ends_with: String

  """All values not ending with the given string."""
  stateAbbr_not_ends_with: String
  suffix: String

  """All values that are not equal to given value."""
  suffix_not: String

  """All values that are contained in given list."""
  suffix_in: [String!]

  """All values that are not contained in given list."""
  suffix_not_in: [String!]

  """All values less than the given value."""
  suffix_lt: String

  """All values less than or equal the given value."""
  suffix_lte: String

  """All values greater than the given value."""
  suffix_gt: String

  """All values greater than or equal the given value."""
  suffix_gte: String

  """All values containing the given string."""
  suffix_contains: String

  """All values not containing the given string."""
  suffix_not_contains: String

  """All values starting with the given string."""
  suffix_starts_with: String

  """All values not starting with the given string."""
  suffix_not_starts_with: String

  """All values ending with the given string."""
  suffix_ends_with: String

  """All values not ending with the given string."""
  suffix_not_ends_with: String
  teamPositionId: Int

  """All values that are not equal to given value."""
  teamPositionId_not: Int

  """All values that are contained in given list."""
  teamPositionId_in: [Int!]

  """All values that are not contained in given list."""
  teamPositionId_not_in: [Int!]

  """All values less than the given value."""
  teamPositionId_lt: Int

  """All values less than or equal the given value."""
  teamPositionId_lte: Int

  """All values greater than the given value."""
  teamPositionId_gt: Int

  """All values greater than or equal the given value."""
  teamPositionId_gte: Int
  testUser: Boolean

  """All values that are not equal to given value."""
  testUser_not: Boolean
  thirdPartyIds: String

  """All values that are not equal to given value."""
  thirdPartyIds_not: String

  """All values that are contained in given list."""
  thirdPartyIds_in: [String!]

  """All values that are not contained in given list."""
  thirdPartyIds_not_in: [String!]

  """All values less than the given value."""
  thirdPartyIds_lt: String

  """All values less than or equal the given value."""
  thirdPartyIds_lte: String

  """All values greater than the given value."""
  thirdPartyIds_gt: String

  """All values greater than or equal the given value."""
  thirdPartyIds_gte: String

  """All values containing the given string."""
  thirdPartyIds_contains: String

  """All values not containing the given string."""
  thirdPartyIds_not_contains: String

  """All values starting with the given string."""
  thirdPartyIds_starts_with: String

  """All values not starting with the given string."""
  thirdPartyIds_not_starts_with: String

  """All values ending with the given string."""
  thirdPartyIds_ends_with: String

  """All values not ending with the given string."""
  thirdPartyIds_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  company: CompanyWhereInput
  leads_every: LeadWhereInput
  leads_some: LeadWhereInput
  leads_none: LeadWhereInput
  role: RoleWhereInput
  salesTeams_every: SalesTeamWhereInput
  salesTeams_some: SalesTeamWhereInput
  salesTeams_none: SalesTeamWhereInput
  team: SalesTeamWhereInput
}

input UserWhereUniqueInput {
  id: Int
}
